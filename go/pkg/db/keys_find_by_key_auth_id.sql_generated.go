// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: keys_find_by_key_auth_id.sql

package db

import (
	"context"
)

const findKeysByKeyAuthId = `-- name: FindKeysByKeyAuthId :many
SELECT id, key_auth_id, hash, start, workspace_id, for_workspace_id, name, owner_id, identity_id, meta, expires, created_at_m, updated_at_m, deleted_at_m, refill_day, refill_amount, last_refill_at, enabled, remaining_requests, ratelimit_async, ratelimit_limit, ratelimit_duration, environment
FROM ` + "`" + `keys` + "`" + `
WHERE key_auth_id = ?
AND deleted_at_m IS NULL
`

// FindKeysByKeyAuthId
//
//	SELECT id, key_auth_id, hash, start, workspace_id, for_workspace_id, name, owner_id, identity_id, meta, expires, created_at_m, updated_at_m, deleted_at_m, refill_day, refill_amount, last_refill_at, enabled, remaining_requests, ratelimit_async, ratelimit_limit, ratelimit_duration, environment
//	FROM `keys`
//	WHERE key_auth_id = ?
//	AND deleted_at_m IS NULL
func (q *Queries) FindKeysByKeyAuthId(ctx context.Context, db DBTX, keyAuthID string) ([]Key, error) {
	rows, err := db.QueryContext(ctx, findKeysByKeyAuthId, keyAuthID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Key
	for rows.Next() {
		var i Key
		if err := rows.Scan(
			&i.ID,
			&i.KeyAuthID,
			&i.Hash,
			&i.Start,
			&i.WorkspaceID,
			&i.ForWorkspaceID,
			&i.Name,
			&i.OwnerID,
			&i.IdentityID,
			&i.Meta,
			&i.Expires,
			&i.CreatedAtM,
			&i.UpdatedAtM,
			&i.DeletedAtM,
			&i.RefillDay,
			&i.RefillAmount,
			&i.LastRefillAt,
			&i.Enabled,
			&i.RemainingRequests,
			&i.RatelimitAsync,
			&i.RatelimitLimit,
			&i.RatelimitDuration,
			&i.Environment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
