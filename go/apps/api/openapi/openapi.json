{
  "info": {
    "title": "Unkey API",
    "version": "2.0.0"
  },
  "openapi": "3.0.1",
  "servers": [
    {
      "url": "https://api.unkey.com"
    }
  ],
  "x-speakeasy-retries": {
    "strategy": "backoff",
    "backoff": {
      "initialInterval": 50,
      "maxInterval": 1000,
      "maxElapsedTime": 10000,
      "exponent": 1.5
    },
    "statusCodes": [
      "5XX"
    ],
    "retryConnectionErrors": true
  },
  "components": {
    "securitySchemes": {
      "rootKey": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "root key",
        "x-speakeasy-example": "UNKEY_ROOT_KEY"
      }
    },
    "schemas": {
      "Meta": {
        "type": "object",
        "required": [
          "requestId"
        ],
        "properties": {
          "requestId": {
            "description": "A unique id for this request. Please always provide this to support.",
            "example": "req_123",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "cursor": {
            "description": "Opaque token for retrieving the next set of results",
            "example": "cursor_xyz123",
            "type": "string"
          },
          "hasMore": {
            "description": "Indicates if more results exist beyond this page",
            "example": true,
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BaseError": {
        "properties": {
          "detail": {
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "example": "Property foo is required but is missing.",
            "type": "string"
          },
          "instance": {
            "description": "A URI reference that identifies the specific occurrence of the problem.",
            "example": "https://example.com/error-log/abc123",
            "format": "uri",
            "type": "string"
          },
          "status": {
            "description": "HTTP status code",
            "example": 404,
            "format": "int",
            "type": "integer"
          },
          "title": {
            "description": "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
            "type": "string"
          },
          "type": {
            "description": "A URI reference to human-readable documentation for the error.",
            "example": "https://example.com/errors/example",
            "format": "uri",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "detail",
          "status",
          "title",
          "type"
        ]
      },
      "ValidationError": {
        "additionalProperties": false,
        "properties": {
          "location": {
            "description": "Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'",
            "type": "string"
          },
          "message": {
            "description": "Error message text",
            "type": "string"
          },
          "fix": {
            "description": "A human-readable message describing how to fix the error.",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "message",
          "location"
        ]
      },
      "BadRequestErrorDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "type": "object",
            "properties": {
              "errors": {
                "description": "Optional list of individual error details",
                "items": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "type": "array"
              }
            },
            "required": [
              "errors"
            ]
          }
        ]
      },
      "NotFoundErrorResponse": {
        "type": "object",
        "required": [
          "meta",
          "error"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "ConflictErrorResponse": {
        "type": "object",
        "required": [
          "meta",
          "error"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "UnauthorizedErrorResponse": {
        "type": "object",
        "required": [
          "meta",
          "error"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "ForbiddenErrorResponse": {
        "type": "object",
        "required": [
          "meta",
          "error"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "PreconditionFailedErrorResponse": {
        "type": "object",
        "required": [
          "meta",
          "error"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "BadRequestErrorResponse": {
        "type": "object",
        "required": [
          "meta",
          "error"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BadRequestErrorDetails"
          }
        }
      },
      "InternalServerErrorResponse": {
        "type": "object",
        "required": [
          "meta",
          "error"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "Identity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identity ID"
          },
          "externalId": {
            "type": "string",
            "description": "External identity ID"
          },
          "meta": {
            "type": "object",
            "description": "Identity metadata"
          }
        },
        "required": [
          "id",
          "externalId"
        ]
      },
      "KeyCredits": {
        "type": "object",
        "description": "Remaining requests for this key",
        "properties": {
          "remaining": {
            "type": "integer",
            "description": "Remaining credits"
          },
          "refill": {
            "$ref": "#/components/schemas/KeyCreditsRefill"
          }
        },
        "required": [
          "remaining"
        ]
      },
      "KeyCreditsRefill": {
        "type": "object",
        "properties": {
          "interval": {
            "type": "string",
            "enum": [
              "daily",
              "monthly"
            ],
            "description": "Refill interval"
          },
          "amount": {
            "type": "integer",
            "description": "Amount to refill"
          },
          "refillDay": {
            "type": "integer",
            "description": "Day of the month when refill happens (for monthly interval)"
          },
          "lastRefillAt": {
            "type": "integer",
            "format": "int64",
            "description": "Last time the key was refilled (Unix timestamp)"
          }
        },
        "required": [
          "interval",
          "amount"
        ]
      },
      "KeyResponse": {
        "type": "object",
        "properties": {
          "keyId": {
            "type": "string",
            "description": "The key ID"
          },
          "start": {
            "type": "string",
            "description": "The first few characters of the key"
          },
          "name": {
            "type": "string",
            "description": "Optional name for the key"
          },
          "meta": {
            "type": "object",
            "description": "Optional metadata for the key"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64",
            "description": "When the key was created (Unix timestamp)"
          },
          "updatedAt": {
            "type": "integer",
            "format": "int64",
            "description": "When the key was last updated (Unix timestamp)"
          },
          "expires": {
            "type": "integer",
            "format": "int64",
            "description": "When the key expires (Unix timestamp)"
          },
          "credits": {
            "$ref": "#/components/schemas/KeyCredits"
          },
          "environment": {
            "type": "string",
            "description": "Optional environment tag"
          },
          "plaintext": {
            "type": "string",
            "description": "The decrypted key value (only included if decrypt=true)"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Roles assigned to this key"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Permissions assigned to this key"
          },
          "identity": {
            "$ref": "#/components/schemas/Identity"
          }
        },
        "required": [
          "keyId",
          "start",
          "createdAt"
        ]
      },
      "LivenessResponseData": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Whether we're alive or not",
            "example": "OK",
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "V2LivenessResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/LivenessResponseData"
          }
        }
      },
      "V2RatelimitSetOverrideRequestBody": {
        "description": "Sets a new or overwrites an existing override.",
        "additionalProperties": false,
        "properties": {
          "namespaceId": {
            "description": "The id of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "namespaceName": {
            "description": "The name of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string"
          },
          "duration": {
            "description": "The duration in milliseconds for the rate limit window.",
            "format": "int64",
            "type": "integer",
            "minimum": 1000
          },
          "identifier": {
            "description": "Identifier of your user, this can be their userId, an email, an ip or anything else. Wildcards ( * ) can be used to match multiple identifiers, More info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "limit": {
            "description": "The maximum number of requests allowed.",
            "format": "int64",
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "identifier",
          "limit",
          "duration"
        ],
        "type": "object"
      },
      "RatelimitSetOverrideResponseData": {
        "type": "object",
        "properties": {
          "overrideId": {
            "description": "The id of the override. This is used internally.",
            "type": "string"
          }
        },
        "required": [
          "overrideId"
        ]
      },
      "V2RatelimitSetOverrideResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/RatelimitSetOverrideResponseData"
          }
        }
      },
      "V2RatelimitGetOverrideRequestBody": {
        "description": "Gets the configuration of an existing override.",
        "additionalProperties": false,
        "properties": {
          "namespaceId": {
            "description": "The id of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "namespaceName": {
            "description": "The name of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "identifier": {
            "description": "Identifier of your user, this can be their userId, an email, an ip or anything else. Wildcards ( * ) can be used to match multiple identifiers, More info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "V2RatelimitGetOverrideResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/RatelimitOverride"
          }
        }
      },
      "V2RatelimitListOverridesRequestBody": {
        "additionalProperties": false,
        "properties": {
          "namespaceId": {
            "description": "The id of the namespace to list overrides for.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "namespaceName": {
            "description": "The name of the namespace to list overrides for.",
            "type": "string"
          },
          "cursor": {
            "description": "Pagination cursor from a previous response",
            "type": "string"
          },
          "limit": {
            "description": "Maximum number of results to return",
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          }
        },
        "type": "object"
      },
      "RatelimitListOverridesResponseData": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RatelimitOverride"
        }
      },
      "V2RatelimitListOverridesResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/RatelimitListOverridesResponseData"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "V2RatelimitLimitRequestBody": {
        "additionalProperties": false,
        "properties": {
          "namespace": {
            "description": "The namespace name for the rate limit.",
            "type": "string",
            "example": "sms.sign_up",
            "minLength": 1,
            "maxLength": 255
          },
          "cost": {
            "description": "The cost of the request. Defaults to 1 if not provided.",
            "format": "int64",
            "type": "integer",
            "default": 1,
            "minimum": 0
          },
          "duration": {
            "description": "The duration in milliseconds for the rate limit window.",
            "format": "int64",
            "type": "integer",
            "minimum": 1000,
            "maximum": 86400000
          },
          "identifier": {
            "description": "The identifier for the rate limit.",
            "type": "string"
          },
          "limit": {
            "description": "The maximum number of requests allowed.",
            "format": "int64",
            "type": "integer",
            "minimum": 1
          }
        },
        "required": [
          "namespace",
          "identifier",
          "limit",
          "duration"
        ],
        "type": "object"
      },
      "RatelimitLimitResponseData": {
        "type": "object",
        "properties": {
          "limit": {
            "description": "The maximum number of requests allowed.",
            "format": "int64",
            "type": "integer"
          },
          "remaining": {
            "description": "The number of requests remaining in the current window.",
            "format": "int64",
            "type": "integer"
          },
          "reset": {
            "description": "The time in milliseconds when the rate limit will reset.",
            "format": "int64",
            "type": "integer"
          },
          "success": {
            "description": "Whether the request passed the ratelimit. If false, the request must be blocked.",
            "type": "boolean"
          },
          "overrideId": {
            "description": "The override that was used. May be empty",
            "type": "string"
          }
        },
        "required": [
          "limit",
          "remaining",
          "reset",
          "success"
        ]
      },
      "V2RatelimitLimitResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/RatelimitLimitResponseData"
          }
        }
      },
      "V2RatelimitDeleteOverrideRequestBody": {
        "description": "Deletes an existing override.",
        "additionalProperties": false,
        "properties": {
          "namespaceId": {
            "description": "The id of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "namespaceName": {
            "description": "The name of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "identifier": {
            "description": "Identifier of the override to delete",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "RatelimitDeleteOverrideResponseData": {
        "type": "object",
        "additionalProperties": false
      },
      "V2RatelimitDeleteOverrideResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/RatelimitDeleteOverrideResponseData"
          }
        }
      },
      "V2IdentitiesCreateIdentityRequestBody": {
        "type": "object",
        "required": [
          "externalId"
        ],
        "properties": {
          "externalId": {
            "type": "string",
            "minLength": 3,
            "description": "The id of this identity in your system.\n\nThis usually comes from your authentication provider and could be a userId, organisationId or even an email.\nIt does not matter what you use, as long as it uniquely identifies something in your application.\n\n`externalId`s are unique across your workspace and therefore a `CONFLICT` error is returned when you try to create duplicates.\n",
            "example": "user_123"
          },
          "meta": {
            "type": "object",
            "description": "Attach metadata to this identity that you need to have access to when verifying a key.\n\nThis will be returned as part of the `verifyKey` response.\n"
          },
          "ratelimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ratelimit"
            },
            "description": "Attach ratelimits to this identity.\n\nWhen verifying keys, you can specify which limits you want to use and all keys attached to this identity, will share the limits."
          }
        }
      },
      "Ratelimit": {
        "type": "object",
        "required": [
          "name",
          "limit",
          "duration"
        ],
        "properties": {
          "name": {
            "description": "The name of this limit. You will need to use this again when verifying a key.",
            "type": "string",
            "example": "api",
            "minLength": 3,
            "maxLength": 128
          },
          "limit": {
            "description": "How many requests may pass within a given window before requests are rejected.",
            "type": "integer",
            "format": "int64"
          },
          "duration": {
            "description": "The duration for each ratelimit window in milliseconds.",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "IdentitiesCreateIdentityResponseData": {
        "type": "object",
        "properties": {
          "identityId": {
            "description": "The id of the identity. Used internally, you do not need to store this.",
            "type": "string"
          }
        },
        "required": [
          "identityId"
        ]
      },
      "V2IdentitiesCreateIdentityResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/IdentitiesCreateIdentityResponseData"
          }
        }
      },
      "V2IdentitiesDeleteIdentityRequestBody": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "minLength": 3,
            "description": "The id of this identity in your system.\n\nThis usually comes from your authentication provider and could be a userId, organisationId or even an email.\nIt does not matter what you use, as long as it uniquely identifies something in your application.\n",
            "example": "user_123"
          },
          "identityId": {
            "type": "string",
            "minLength": 3,
            "description": "The Unkey Identity ID.",
            "example": "id_123"
          }
        },
        "oneOf": [
          {
            "required": [
              "externalId"
            ]
          },
          {
            "required": [
              "identityId"
            ]
          }
        ]
      },
      "V2IdentitiesDeleteIdentityResponseBody": {
        "type": "object"
      },
      "Permission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the permission"
          },
          "name": {
            "type": "string",
            "description": "The unique name of the permission"
          },
          "description": {
            "type": "string",
            "description": "A description of what this permission grants access to"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace this permission belongs to"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the permission was created"
          }
        },
        "required": [
          "id",
          "name",
          "workspaceId"
        ]
      },
      "V2PermissionsCreatePermissionRequestBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The unique name of your permission",
            "example": "record.write"
          },
          "description": {
            "type": "string",
            "description": "Explain what this permission does. This is just for your team, your users will not see this.",
            "example": "record.write can create new dns records for our domains."
          }
        },
        "additionalProperties": false
      },
      "PermissionsCreatePermissionResponseData": {
        "type": "object",
        "properties": {
          "permissionId": {
            "type": "string",
            "description": "The id of the permission. This is used internally",
            "example": "perm_123"
          }
        },
        "required": [
          "permissionId"
        ]
      },
      "V2PermissionsCreatePermissionResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/PermissionsCreatePermissionResponseData"
          }
        }
      },
      "V2PermissionsGetPermissionRequestBody": {
        "type": "object",
        "required": [
          "permissionId"
        ],
        "properties": {
          "permissionId": {
            "type": "string",
            "minLength": 1,
            "description": "The id of the permission to retrieve",
            "example": "perm_123"
          }
        },
        "additionalProperties": false
      },
      "PermissionsGetPermissionResponseData": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/Permission"
          }
        },
        "required": [
          "permission"
        ]
      },
      "V2PermissionsGetPermissionResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/PermissionsGetPermissionResponseData"
          }
        }
      },
      "V2PermissionsListPermissionsRequestBody": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of permissions to return",
            "default": 100,
            "minimum": 1,
            "maximum": 100
          },
          "cursor": {
            "type": "string",
            "description": "Cursor for pagination"
          }
        },
        "additionalProperties": false
      },
      "PermissionsListPermissionsResponseData": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "cursor": {
            "type": "string",
            "description": "Cursor for pagination"
          },
          "total": {
            "type": "integer",
            "description": "Total number of permissions"
          }
        },
        "required": [
          "permissions",
          "total"
        ]
      },
      "V2PermissionsListPermissionsResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/PermissionsListPermissionsResponseData"
          }
        }
      },
      "V2PermissionsListRolesRequestBody": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of roles to return",
            "default": 100,
            "minimum": 1,
            "maximum": 100
          },
          "cursor": {
            "type": "string",
            "description": "Cursor for pagination"
          }
        },
        "additionalProperties": false
      },
      "PermissionsListRolesResponseData": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleWithPermissions"
            }
          },
          "cursor": {
            "type": "string",
            "description": "Cursor for pagination"
          },
          "total": {
            "type": "integer",
            "description": "Total number of roles"
          }
        },
        "required": [
          "roles",
          "total"
        ]
      },
      "V2PermissionsDeleteRoleRequestBody": {
        "type": "object",
        "required": [
          "roleId"
        ],
        "properties": {
          "roleId": {
            "type": "string",
            "minLength": 1,
            "description": "The id of the role to delete",
            "example": "role_123"
          }
        },
        "additionalProperties": false
      },
      "V2PermissionsDeleteRoleResponseBody": {
        "type": "object",
        "required": [
          "meta"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "V2PermissionsListRolesResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/PermissionsListRolesResponseData"
          }
        }
      },
      "V2PermissionsDeletePermissionRequestBody": {
        "type": "object",
        "required": [
          "permissionId"
        ],
        "properties": {
          "permissionId": {
            "type": "string",
            "minLength": 1,
            "description": "The id of the permission to delete",
            "example": "perm_123"
          }
        },
        "additionalProperties": false
      },
      "V2PermissionsDeletePermissionResponseBody": {
        "type": "object",
        "required": [
          "meta"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "V2PermissionsCreateRoleRequestBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The unique name of your role",
            "example": "dns.records.manager"
          },
          "description": {
            "type": "string",
            "description": "Explain what this role does. This is just for your team, your users will not see this.",
            "example": "dns.records.manager can read and write dns records for our domains."
          },
          "permissionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The permission IDs to assign to this role"
          }
        },
        "additionalProperties": false
      },
      "PermissionsCreateRoleResponseData": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "string",
            "description": "The id of the role. This is used internally",
            "example": "role_123"
          }
        },
        "required": [
          "roleId"
        ]
      },
      "V2PermissionsCreateRoleResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/PermissionsCreateRoleResponseData"
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the role"
          },
          "name": {
            "type": "string",
            "description": "The unique name of the role"
          },
          "description": {
            "type": "string",
            "description": "A description of what this role represents"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace this role belongs to"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the role was created"
          }
        },
        "required": [
          "id",
          "name",
          "workspaceId"
        ]
      },
      "RoleWithPermissions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the role"
          },
          "name": {
            "type": "string",
            "description": "The unique name of the role"
          },
          "description": {
            "type": "string",
            "description": "A description of what this role represents"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace this role belongs to"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the role was created"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "description": "The permissions assigned to this role"
          }
        },
        "required": [
          "id",
          "name",
          "workspaceId",
          "permissions"
        ]
      },
      "V2PermissionsGetRoleRequestBody": {
        "type": "object",
        "required": [
          "roleId"
        ],
        "properties": {
          "roleId": {
            "type": "string",
            "minLength": 1,
            "description": "The id of the role to retrieve",
            "example": "role_123"
          }
        },
        "additionalProperties": false
      },
      "PermissionsGetRoleResponseData": {
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/RoleWithPermissions"
          }
        },
        "required": [
          "role"
        ]
      },
      "V2PermissionsGetRoleResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/PermissionsGetRoleResponseData"
          }
        }
      },
      "V2ApisCreateApiRequestBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "description": "The name for your API. This is not customer facing.",
            "example": "my-api"
          }
        },
        "additionalProperties": false
      },
      "ApisCreateApiResponseData": {
        "type": "object",
        "properties": {
          "apiId": {
            "description": "The id of the API",
            "type": "string"
          }
        },
        "required": [
          "apiId"
        ]
      },
      "V2ApisDeleteApiRequestBody": {
        "type": "object",
        "required": [
          "apiId"
        ],
        "properties": {
          "apiId": {
            "type": "string",
            "minLength": 3,
            "description": "The id of the API you want to delete. API ids always start with `api_`",
            "example": "api_VNcuGfVjUkrVcWJmda0A"
          }
        },
        "additionalProperties": false
      },
      "V2ApisGetApiRequestBody": {
        "type": "object",
        "required": [
          "apiId"
        ],
        "properties": {
          "apiId": {
            "type": "string",
            "minLength": 1,
            "description": "The id of the api to fetch",
            "example": "api_1234"
          }
        },
        "additionalProperties": false
      },
      "ApisGetApiResponseData": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the API",
            "type": "string"
          },
          "name": {
            "description": "The name of the API",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "V2ApisCreateApiResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/ApisCreateApiResponseData"
          }
        }
      },
      "V2ApisDeleteApiResponseBody": {
        "type": "object",
        "required": [
          "meta"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "V2ApisGetApiResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/ApisGetApiResponseData"
          }
        }
      },
      "V2ApisListKeysRequestBody": {
        "type": "object",
        "required": [
          "apiId"
        ],
        "properties": {
          "apiId": {
            "type": "string",
            "minLength": 1,
            "description": "The id of the api to fetch",
            "example": "api_1234"
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of keys to return",
            "default": 100,
            "minimum": 1,
            "maximum": 100
          },
          "cursor": {
            "type": "string",
            "description": "Use this to fetch the next page of results. A new cursor will be returned in the response if there are more results."
          },
          "externalId": {
            "type": "string",
            "minLength": 3,
            "description": "If provided, this will only return keys where the `externalId` matches."
          },
          "decrypt": {
            "type": "boolean",
            "description": "Decrypt and display the raw key. Only possible if the key was encrypted when generated."
          },
          "revalidateKeysCache": {
            "type": "boolean",
            "default": false,
            "description": "EXPERIMENTAL: Skip the cache and fetch the keys from the database directly. When you're creating a key and immediately listing all keys to display them to your user, you might want to skip the cache to ensure the key is displayed immediately."
          }
        },
        "additionalProperties": false
      },
      "ApisListKeysResponseData": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/KeyResponse"
        }
      },
      "V2ApisListKeysResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/ApisListKeysResponseData"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "RatelimitOverride": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "namespaceId": {
            "description": "The id of the namespace.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "overrideId": {
            "description": "The id of the override.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "duration": {
            "description": "The duration in milliseconds for the rate limit window.",
            "format": "int64",
            "type": "integer",
            "minimum": 1000
          },
          "identifier": {
            "description": "Identifier of your user, this can be their userId, an email, an ip or anything else. Wildcards ( * ) can be used to match multiple identifiers, More info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "limit": {
            "description": "The maximum number of requests allowed.",
            "format": "int64",
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "namespaceId",
          "overrideId",
          "duration",
          "identifier",
          "limit"
        ]
      },
      "V2KeysVerifyKeyRequestBody": {
        "type": "object",
        "required": [
          "apiId",
          "key"
        ],
        "properties": {
          "apiId": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255,
            "description": "The ID of the API where the key belongs to. Required to ensure keys from development environments aren't leaking into production and vice versa.",
            "example": "api_1234"
          },
          "key": {
            "type": "string",
            "minLength": 1,
            "description": "The key to verify. Never store API keys yourself.",
            "example": "sk_1234"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 128
            },
            "maxItems": 10,
            "description": "Tags do not influence the outcome of a verification. They can be added to filter or aggregate historical verification data for your analytics needs.",
            "example": [
              "path=/v1/users/123",
              "region=us-east-1"
            ]
          },
          "permissions": {
            "oneOf": [
              {
                "type": "string",
                "description": "A single permission to check"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "and",
                      "or"
                    ],
                    "description": "Logical operator to apply to the permissions"
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of permissions to check"
                  }
                },
                "required": [
                  "type",
                  "permissions"
                ]
              }
            ],
            "description": "Perform RBAC permission checks"
          },
          "credits": {
            "type": "object",
            "properties": {
              "cost": {
                "type": "integer",
                "format": "int32",
                "default": 1,
                "description": "How many tokens should be deducted from the current credits. Set it to 0 to make it free."
              }
            },
            "description": "Customize the behavior of deducting remaining uses. When some of your endpoints are more expensive than others, you can set a custom cost for each."
          },
          "ratelimits": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "description": "The name of the ratelimit.",
                  "example": "tokens"
                },
                "cost": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "default": 1,
                  "description": "Optionally override how expensive this operation is and how many tokens are deducted from the current limit."
                },
                "limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Optionally override the limit."
                },
                "duration": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Optionally override the ratelimit window duration."
                }
              }
            },
            "description": "You can check against multiple ratelimits when verifying a key."
          }
        },
        "additionalProperties": false
      },
      "KeysVerifyKeyResponseData": {
        "type": "object",
        "properties": {
          "keyId": {
            "type": "string",
            "description": "The id of the key"
          },
          "valid": {
            "type": "boolean",
            "description": "Whether the key is valid or not."
          },
          "name": {
            "type": "string",
            "description": "The name of the key, give keys a name to easily identify their purpose"
          },
          "externalId": {
            "type": "string",
            "description": "The id of the tenant associated with this key."
          },
          "meta": {
            "type": "object",
            "additionalProperties": true,
            "description": "Any additional metadata stored with the key"
          },
          "expires": {
            "type": "integer",
            "format": "int64",
            "description": "The unix timestamp in milliseconds when the key will expire. If null or undefined, the key is not expiring."
          },
          "credits": {
            "type": "integer",
            "format": "int32",
            "description": "The number of requests that can be made with this key before it becomes invalid. If null or undefined, the key has no request limit."
          },
          "enabled": {
            "type": "boolean",
            "description": "Sets the key to be enabled or disabled. Disabled keys will not verify."
          },
          "code": {
            "type": "string",
            "enum": [
              "VALID",
              "NOT_FOUND",
              "FORBIDDEN",
              "USAGE_EXCEEDED",
              "RATE_LIMITED",
              "UNAUTHORIZED",
              "DISABLED",
              "INSUFFICIENT_PERMISSIONS",
              "EXPIRED"
            ],
            "description": "A machine readable code why the key is not valid. Possible values are: VALID, NOT_FOUND, FORBIDDEN, USAGE_EXCEEDED, RATE_LIMITED, UNAUTHORIZED, DISABLED, INSUFFICIENT_PERMISSIONS, EXPIRED"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of all the permissions this key is connected to."
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of all the roles this key is connected to."
          },
          "environment": {
            "type": "string",
            "description": "The environment of the key, this is what was set when you created the key"
          },
          "identity": {
            "$ref": "#/components/schemas/Identity",
            "description": "The associated identity of this key."
          },
          "ratelimits": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "limit",
                "remaining",
                "reset"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the ratelimit"
                },
                "limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of requests that can be made inside a window"
                },
                "remaining": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Remaining requests after this verification"
                },
                "reset": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Unix timestamp in milliseconds when the ratelimit will reset"
                }
              }
            },
            "description": "Ratelimit information for the key"
          }
        },
        "required": [
          "valid",
          "code"
        ]
      },
      "V2KeysVerifyKeyResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/KeysVerifyKeyResponseData"
          }
        }
      }
    }
  },
  "paths": {
    "/v2/ratelimit.limit": {
      "post": {
        "tags": [
          "ratelimit"
        ],
        "operationId": "ratelimit.limit",
        "x-speakeasy-name-override": "limit",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2RatelimitLimitRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2RatelimitLimitResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/permissions.listRoles": {
      "post": {
        "tags": [
          "permissions"
        ],
        "operationId": "listRoles",
        "x-speakeasy-name-override": "ListRoles",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2PermissionsListRolesRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2PermissionsListRolesResponseBody"
                }
              }
            },
            "description": "Successfully listed roles"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v2/ratelimit.setOverride": {
      "post": {
        "tags": [
          "ratelimit"
        ],
        "operationId": "ratelimit.setOverride",
        "x-speakeasy-name-override": "setOverride",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2RatelimitSetOverrideRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2RatelimitSetOverrideResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/ratelimit.getOverride": {
      "post": {
        "tags": [
          "ratelimit"
        ],
        "operationId": "ratelimit.getOverride",
        "x-speakeasy-name-override": "getOverride",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2RatelimitGetOverrideRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2RatelimitGetOverrideResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/ratelimit.listOverrides": {
      "post": {
        "tags": [
          "ratelimit"
        ],
        "operationId": "ratelimit.listOverrides",
        "x-speakeasy-name-override": "listOverrides",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2RatelimitListOverridesRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2RatelimitListOverridesResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/ratelimit.deleteOverride": {
      "post": {
        "tags": [
          "ratelimit"
        ],
        "operationId": "ratelimit.deleteOverride",
        "x-speakeasy-name-override": "deleteOverride",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2RatelimitDeleteOverrideRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2RatelimitDeleteOverrideResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/identities.createIdentity": {
      "post": {
        "tags": [
          "identities"
        ],
        "operationId": "identities.createIdentity",
        "x-speakeasy-name-override": "createIdentity",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2IdentitiesCreateIdentityRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2IdentitiesCreateIdentityResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "This response is sent when a request conflicts with the current state of the server.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/identities.deleteIdentity": {
      "post": {
        "tags": [
          "identities"
        ],
        "operationId": "v2.identities.deleteIdentity",
        "x-speakeasy-name-override": "deleteIdentity",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2IdentitiesDeleteIdentityRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2IdentitiesDeleteIdentityResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/permissions.createPermission": {
      "post": {
        "tags": [
          "permissions"
        ],
        "operationId": "createPermission",
        "x-speakeasy-name-override": "CreatePermission",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2PermissionsCreatePermissionRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2PermissionsCreatePermissionResponseBody"
                }
              }
            },
            "description": "Successfully created permission"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - permission with that name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v2/permissions.getPermission": {
      "post": {
        "tags": [
          "permissions"
        ],
        "operationId": "getPermission",
        "x-speakeasy-name-override": "GetPermission",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2PermissionsGetPermissionRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2PermissionsGetPermissionResponseBody"
                }
              }
            },
            "description": "Successfully retrieved permission"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v2/permissions.listPermissions": {
      "post": {
        "tags": [
          "permissions"
        ],
        "operationId": "listPermissions",
        "x-speakeasy-name-override": "ListPermissions",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2PermissionsListPermissionsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2PermissionsListPermissionsResponseBody"
                }
              }
            },
            "description": "Successfully listed permissions"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v2/permissions.deleteRole": {
      "post": {
        "tags": [
          "permissions"
        ],
        "operationId": "deleteRole",
        "x-speakeasy-name-override": "DeleteRole",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2PermissionsDeleteRoleRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2PermissionsDeleteRoleResponseBody"
                }
              }
            },
            "description": "Successfully deleted role"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - role with that name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v2/apis.createApi": {
      "post": {
        "tags": [
          "apis"
        ],
        "operationId": "createApi",
        "x-speakeasy-name-override": "createApi",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2ApisCreateApiRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2ApisCreateApiResponseBody"
                }
              }
            },
            "description": "Successfully created API"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/apis.deleteApi": {
      "post": {
        "tags": [
          "apis"
        ],
        "operationId": "deleteApi",
        "x-speakeasy-name-override": "deleteApi",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2ApisDeleteApiRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2ApisDeleteApiResponseBody"
                }
              }
            },
            "description": "Successfully deleted the API"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/apis.getApi": {
      "post": {
        "tags": [
          "apis"
        ],
        "operationId": "getApi",
        "x-speakeasy-name-override": "getApi",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2ApisGetApiRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2ApisGetApiResponseBody"
                }
              }
            },
            "description": "Successfully retrieved API"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/apis.listKeys": {
      "post": {
        "tags": [
          "apis"
        ],
        "operationId": "listKeys",
        "x-speakeasy-name-override": "listKeys",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2ApisListKeysRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2ApisListKeysResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v2/liveness": {
      "get": {
        "x-speakeasy-ignore": "true",
        "tags": [
          "liveness"
        ],
        "operationId": "liveness",
        "description": "This endpoint checks if the service is alive.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2LivenessResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreconditionFailedErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Liveness check"
      }
    },
    "/v2/keys.verifyKey": {
      "post": {
        "tags": [
          "keys"
        ],
        "operationId": "verifyKey",
        "x-speakeasy-name-override": "verifyKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2KeysVerifyKeyRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2KeysVerifyKeyResponseBody"
                }
              }
            },
            "description": "Verification result"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        }
      }
    }
  }
}
