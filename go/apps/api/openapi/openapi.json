{
  "info": {
    "title": "Unkey API",
    "version": "2.0.0"
  },
  "openapi": "3.0.1",
  "servers": [
    {
      "url": "https://api.unkey.com"
    }
  ],
  "x-speakeasy-retries": {
    "strategy": "backoff",
    "backoff": {
      "initialInterval": 50,
      "maxInterval": 1000,
      "maxElapsedTime": 10000,
      "exponent": 1.5
    },
    "statusCodes": [
      "5XX"
    ],
    "retryConnectionErrors": true
  },
  "components": {
    "securitySchemes": {
      "rootKey": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "root key",
        "x-speakeasy-example": "UNKEY_ROOT_KEY"
      }
    },
    "schemas": {
      "V2KeysUpdateKeyRequestBody": {
        "type": "object",
        "required": [
          "keyId"
        ],
        "properties": {
          "keyId": {
            "type": "string",
            "minLength": 3,
            "description": "The unique identifier of the key to update (starts with 'key_'). This is the database ID returned from createKey, not the actual API key string itself.",
            "example": "key_2cGKbMxRyIzhCxo1Idjz8q"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "A descriptive name for the key for internal reference. Set to null to remove the name. Omit this field to leave it unchanged.",
            "example": "Payment Service Production Key"
          },
          "externalId": {
            "type": "string",
            "nullable": true,
            "description": "Your user's unique identifier, creating a link between Unkey and your system. Set to null to disconnect this key from any identity. Omit this field to leave it unchanged.",
            "example": "user_912a841d"
          },
          "meta": {
            "type": "object",
            "nullable": true,
            "additionalProperties": true,
            "description": "Arbitrary JSON metadata to associate with this key. Set to null to remove all metadata. Omit this field to leave it unchanged.",
            "example": {
              "plan": "enterprise",
              "limits": {
                "storage": "500GB",
                "compute": "1000 minutes/month"
              }
            }
          },
          "expires": {
            "type": "integer",
            "nullable": true,
            "format": "int64",
            "description": "Unix timestamp (in milliseconds) when this key will automatically expire. Set to null to remove expiration. Omit this field to leave it unchanged.",
            "example": 1704067200000
          },
          "credits": {
            "type": "object",
            "nullable": true,
            "properties": {
              "remaining": {
                "type": "integer",
                "format": "int32",
                "description": "Number of times this key can be used before becoming invalid. Required when specifying credits.",
                "example": 1000
              },
              "refill": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "interval": {
                    "type": "string",
                    "enum": [
                      "daily",
                      "monthly"
                    ],
                    "description": "How often the credits should be refilled. For 'monthly' refills, you can specify the day of month using 'refillDay'."
                  },
                  "amount": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Number of credits to add during each refill."
                  },
                  "refillDay": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 31,
                    "description": "For monthly refills, the day of month when refills occur. Cannot be used with 'daily' interval."
                  }
                },
                "required": [
                  "interval",
                  "amount"
                ],
                "description": "Configuration for automatic credit refills. Set to null to disable refills. Omit this field to leave it unchanged."
              }
            },
            "required": [
              "remaining"
            ],
            "description": "Usage limits configuration for this key. Set to null to disable usage limits. Omit this field to leave it unchanged. Note: Cannot set refill when credits is null; setting refillDay requires interval to be 'monthly'."
          },
          "ratelimits": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "object",
              "required": [
                "name",
                "limit",
                "duration"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Identifier for this ratelimit. Use descriptive names like 'requests' or 'computations'.",
                  "example": "requests"
                },
                "limit": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "description": "Maximum number of operations allowed within the time window.",
                  "example": 100
                },
                "duration": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1000,
                  "description": "Duration of the ratelimit window in milliseconds.",
                  "example": 60000
                },
                "async": {
                  "type": "boolean",
                  "default": true,
                  "description": "Whether this ratelimit uses fast (async=true) or consistent (async=false) mode. Fast mode has lower latency but less accuracy."
                }
              }
            },
            "description": "Array of ratelimits to apply to this key. Set to null to disable all ratelimits. Omit this field to leave it unchanged. Replaces the deprecated 'ratelimit' field from v1."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the key is currently active. Disabled keys will fail verification with code=DISABLED. Omit this field to leave it unchanged.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "KeysUpdateKeyResponseData": {
        "type": "object",
        "properties": {},
        "description": "Empty response object. A successful response indicates the key was updated successfully. Changes may take up to 30 seconds to propagate to all regions due to cache invalidation delays."
      },
      "V2KeysUpdateKeyResponseBody": {
        "type": "object",
        "required": [
          "meta"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/KeysUpdateKeyResponseData"
          }
        }
      },
      "V2KeysDeleteKeyRequestBody": {
        "type": "object",
        "required": [
          "keyId"
        ],
        "properties": {
          "keyId": {
            "type": "string",
            "minLength": 3,
            "description": "The unique identifier of the key to delete (starts with 'key_'). This is the database ID returned from createKey, not the actual API key string itself. Once deleted, verification attempts with this key will fail with code=NOT_FOUND and it will no longer appear in key listings.",
            "example": "key_2cGKbMxRyIzhCxo1Idjz8q"
          },
          "permanent": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether the key should be soft-deleted (default) or permanently erased from the database. Soft deletion marks the key as deleted but preserves its data, allowing potential recovery via direct database operations. Permanent deletion completely removes all traces of the key including its hash and metadata. Use permanent=true for regulatory compliance scenarios (like GDPR), resolving hash collisions during migrations, or when you need to reuse the same key string in the future. CAUTION: Permanent deletion cannot be undone.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "KeysDeleteKeyResponseData": {
        "type": "object",
        "properties": {},
        "description": "Empty response object. A successful response indicates the key was deleted successfully. Deletion triggers cache invalidation across all regions, but it may take up to 30 seconds for the deletion to be fully propagated due to eventual consistency. During this propagation period, some verification attempts might still succeed in certain regions."
      },
      "V2KeysDeleteKeyResponseBody": {
        "type": "object",
        "required": [
          "meta"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/KeysDeleteKeyResponseData"
          }
        }
      },
      "V2KeysGetKeyRequestBody": {
        "type": "object",
        "required": [
          "keyId"
        ],
        "properties": {
          "keyId": {
            "type": "string",
            "minLength": 3,
            "description": "The unique identifier of the key to retrieve (starts with 'key_'). This is the database ID returned from createKey, not the actual API key string itself. You can find this ID in the creation response, key listings, or in the dashboard.",
            "example": "key_2cGKbMxRyIzhCxo1Idjz8q"
          },
          "decrypt": {
            "type": "boolean",
            "default": false,
            "description": "Whether to include the plaintext key in the response. This is only possible for keys created with 'recoverable: true' and requires the 'decrypt_key' permission. SECURITY WARNING: This should be used sparingly and only for legitimate recovery purposes. Keys returned this way must be handled securely and not logged or stored insecurely. Most applications should set this to false."
          }
        },
        "additionalProperties": false
      },
      "KeysGetKeyResponseData": {
        "type": "object",
        "required": [
          "id",
          "start",
          "workspaceId",
          "createdAt",
          "enabled"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the key in Unkey's system.",
            "example": "key_2cGKbMxRyIzhCxo1Idjz8q"
          },
          "start": {
            "type": "string",
            "description": "The first few characters of the key to visually identify it without exposing the full key. Used in dashboards and logs to help users recognize which key is being used without revealing sensitive information. Typically includes the prefix if one was specified.",
            "example": "prod_5j1"
          },
          "workspaceId": {
            "type": "string",
            "description": "The ID of the workspace that owns this key.",
            "example": "ws_1234abcd"
          },
          "apiId": {
            "type": "string",
            "description": "The ID of the API this key belongs to.",
            "example": "api_2cGKbMxRjIzhCxo1IdjH3a"
          },
          "name": {
            "type": "string",
            "description": "A descriptive name for the key for internal reference. Shown in dashboards and logs but never exposed to end users.",
            "example": "Payment Service Production Key"
          },
          "externalId": {
            "type": "string",
            "description": "Your user's unique identifier, creating a link between Unkey and your system. This ID is returned during verification so you can identify which customer/entity is making the request without performing additional database lookups. Use consistent identifiers that match your primary user/tenant identifiers for seamless integration.",
            "example": "user_912a841d"
          },
          "meta": {
            "type": "object",
            "additionalProperties": true,
            "description": "Arbitrary JSON metadata associated with this key. This can include additional context like subscription plans, feature flags, or any custom data. Metadata is stored as-is and returned during verification, allowing you to access important information without additional database queries. Consider including data relevant to authorization decisions, usage tracking, and user context.",
            "example": {
              "plan": "enterprise",
              "limits": {
                "storage": "500GB",
                "compute": "1000 minutes/month"
              },
              "contactInfo": {
                "primaryEmail": "admin@example.com",
                "technicalContact": "tech@example.com"
              },
              "integrations": {
                "slack": true,
                "github": {
                  "enabled": true,
                  "repositories": 10
                }
              },
              "lastActivityTimestamp": 1671048264000
            }
          },
          "createdAt": {
            "type": "integer",
            "format": "int64",
            "description": "Unix timestamp (in milliseconds) when the key was created.",
            "example": 1671048264000
          },
          "updatedAt": {
            "type": "integer",
            "format": "int64",
            "description": "Unix timestamp (in milliseconds) when the key was last updated.",
            "example": 1671135600000
          },
          "expires": {
            "type": "integer",
            "format": "int64",
            "description": "Unix timestamp (in milliseconds) when this key will automatically expire. If null, the key has no expiration.",
            "example": 1704067200000
          },
          "credits": {
            "type": "object",
            "properties": {
              "remaining": {
                "type": "integer",
                "format": "int32",
                "description": "The number of times this key can still be used before becoming invalid.",
                "example": 753
              },
              "refill": {
                "type": "object",
                "required": [
                  "interval",
                  "amount"
                ],
                "properties": {
                  "interval": {
                    "type": "string",
                    "enum": [
                      "daily",
                      "monthly"
                    ],
                    "description": "How often the credits are automatically refilled."
                  },
                  "amount": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Number of credits added during each refill."
                  },
                  "refillDay": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 31,
                    "description": "For monthly refills, the day of month when refills occur."
                  },
                  "lastRefillAt": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unix timestamp (in milliseconds) when credits were last refilled."
                  }
                },
                "description": "Configuration for automatic credit refills."
              }
            },
            "description": "Usage limits configuration for this key. Credits provide a way to limit the number of times a key can be used before becoming invalid. Unlike ratelimits, credits are globally consistent (using database transactions) providing 100% accuracy at the cost of slightly higher latency. Ideal for monetization, usage quotas, or strict limits that must not be exceeded. See the 'refill' field for automatic replenishment options."
          },
          "ratelimits": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "limit",
                "duration"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Identifier for this ratelimit.",
                  "example": "requests"
                },
                "limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of operations allowed within the time window.",
                  "example": 100
                },
                "duration": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Duration of the ratelimit window in milliseconds.",
                  "example": 60000
                },
                "async": {
                  "type": "boolean",
                  "description": "Whether this ratelimit uses fast (async=true) or consistent (async=false) mode. Fast mode has lower latency but less accuracy.",
                  "default": true
                }
              }
            },
            "description": "Array of ratelimits applied to this key. Multiple named ratelimits can control different aspects of key usage. For example, a 'requests' ratelimit might control overall API calls while a separate 'computations' limit manages access to resource-intensive operations. Ratelimits are optimized for performance and typically add minimal latency to verifications. They can be shared across keys through identities."
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of role names assigned to this key. Roles are collections of permissions.",
            "example": [
              "api_admin",
              "billing_reader"
            ]
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permission names directly assigned to this key.",
            "example": [
              "documents.read",
              "documents.write",
              "settings.view"
            ]
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the key is currently active. Disabled keys will fail verification with code=DISABLED. Toggling this allows you to temporarily suspend access without deleting the key, which is useful for maintenance, account freezing, or debugging. Can be updated using the updateKey endpoint.",
            "example": true
          },
          "plaintext": {
            "type": "string",
            "description": "The full API key in plaintext. Only included when 'decrypt' is true and the key was created with 'recoverable: true'. SECURITY RISK: This field contains the actual secret key which should never be logged, stored in databases, or exposed in any frontend code. It should only be displayed directly to users through secure channels. Most applications should avoid setting decrypt=true unless absolutely necessary."
          },
          "identity": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of the identity in Unkey's system."
              },
              "externalId": {
                "type": "string",
                "description": "Your identifier for this identity in your system."
              },
              "meta": {
                "type": "object",
                "additionalProperties": true,
                "description": "Additional metadata associated with this identity."
              }
            },
            "required": [
              "id",
              "externalId"
            ],
            "description": "The identity associated with this key, if any. Identities allow resource sharing (like ratelimits) across multiple keys belonging to the same user/entity. This enables scenarios like issuing separate keys for different devices/services while maintaining global usage limits for the user. An identity's externalId typically matches your user ID or tenant ID."
          }
        }
      },
      "V2KeysGetKeyResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/KeysGetKeyResponseData"
          }
        }
      },
      "V2KeysAddPermissionsRequestBody": {
        "type": "object",
        "required": [
          "keyId",
          "permissions"
        ],
        "properties": {
          "keyId": {
            "type": "string",
            "description": "The ID of the key to which permissions will be added (begins with 'key_')",
            "example": "key_2cGKbMxRyIzhCxo1Idjz8q",
            "minLength": 3
          },
          "permissions": {
            "type": "array",
            "minItems": 1,
            "description": "List of permissions to add to the key. Each permission can be identified by ID or name (if both are provided in the same object, ID takes precedence). Duplicate permissions are automatically handled (adding the same permission twice has no effect). Permissions follow a hierarchical naming structure (e.g., 'documents.read', 'documents.write') and are checked during key verification to control access to protected resources. Note that in addition to direct permissions added here, keys may also have permissions granted through roles (use /v2/keys.addRoles for role management).",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of an existing permission (begins with 'perm_'). Provide either ID or name. Use ID when you know the exact permission identifier and want to ensure you're referencing a specific permission.",
                  "example": "perm_1n9McEIBSqy44Qy7hzWyM5",
                  "minLength": 3
                },
                "name": {
                  "type": "string",
                  "description": "The name of the permission. Provide either ID or name. Permission names typically follow a 'resource.action' format (e.g., 'documents.read', 'users.delete'). Use consistent naming patterns to create logical permission hierarchies.",
                  "example": "documents.write",
                  "minLength": 1
                },
                "create": {
                  "type": "boolean",
                  "description": "When true, if a permission with this name doesn't exist, it will be automatically created. Only works when specifying name, not ID. Requires the rbac.*.create_permission permission on your root key. SECURITY CONSIDERATION: Use this flag carefully as it creates permission entities in your workspace and could lead to permission proliferation if not properly managed.",
                  "default": false
                }
              },
              "additionalProperties": false
            }
          }
        },
        "additionalProperties": false
      },
      "V2KeysAddPermissionsResponseData": {
        "type": "array",
        "description": "Complete list of all permissions directly assigned to the key (including both newly added permissions and those that were already assigned). Note that this list does not include permissions granted through roles - see /v2/keys.getKey for complete permission information. Use this comprehensive list to track the key's current direct permission state. The list is always sorted alphabetically by permission name for consistency. An empty array indicates the key has no direct permissions assigned.",
        "items": {
          "type": "object",
          "required": [
            "id",
            "name"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the permission (begins with 'perm_'). This ID can be used in other API calls to reference this specific permission.",
              "example": "perm_1n9McEIBSqy44Qy7hzWyM5"
            },
            "name": {
              "type": "string",
              "description": "The name of the permission, typically following a 'resource.action' pattern like 'documents.read'. This name is checked during verification to determine if a key has access to a specific action. For wildcard permissions, you can use patterns like 'documents.*' (grants all document permissions) during verification, but each specific permission must be added individually here.",
              "example": "documents.write"
            }
          }
        }
      },
      "V2KeysAddPermissionsResponse": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/V2KeysAddPermissionsResponseData"
          }
        }
      },
      "V2KeysRemovePermissionsRequestBody": {
        "type": "object",
        "required": [
          "keyId",
          "permissions"
        ],
        "properties": {
          "keyId": {
            "type": "string",
            "description": "The unique identifier of the key from which permissions will be removed (begins with 'key_')",
            "example": "key_2cGKbMxRyIzhCxo1Idjz8q",
            "minLength": 3
          },
          "permissions": {
            "type": "array",
            "minItems": 1,
            "description": "List of permissions to remove from the key. Each permission can be identified by ID or name (if both are provided in the same object, ID takes precedence). This operation only affects direct permissions on the key, not permissions granted through roles. Removing permissions that aren't assigned to the key is a no-op and doesn't cause an error.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of the permission to remove (begins with 'perm_'). Provide either ID or name. Using ID is more precise and less prone to naming conflicts.",
                  "example": "perm_1n9McEIBSqy44Qy7hzWyM5",
                  "minLength": 3
                },
                "name": {
                  "type": "string",
                  "description": "The name of the permission to remove. Provide either ID or name. Names should match exactly with the permission name as it was defined.",
                  "example": "documents.write",
                  "minLength": 1
                }
              },
              "additionalProperties": false
            }
          }
        },
        "additionalProperties": false
      },
      "V2KeysRemovePermissionsResponseData": {
        "type": "object",
        "description": "Empty response object. A successful response indicates the permissions were successfully removed. After removal, any cached versions of the key are invalidated to ensure consistency.",
        "additionalProperties": false
      },
      "V2KeysRemovePermissionsResponse": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/V2KeysRemovePermissionsResponseData"
          }
        }
      },
      "V2KeysSetPermissionsRequestBody": {
        "type": "object",
        "required": [
          "keyId",
          "permissions"
        ],
        "properties": {
          "keyId": {
            "type": "string",
            "description": "The unique identifier of the key to set permissions on (begins with 'key_')",
            "example": "key_2cGKbMxRyIzhCxo1Idjz8q",
            "minLength": 3
          },
          "permissions": {
            "type": "array",
            "description": "The permissions to set for this key. This completely replaces all existing direct permissions on the key. An empty array will remove all direct permissions from the key. Permissions granted through roles are not affected.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of an existing permission (begins with 'perm_'). Provide either ID or name. Using ID is more precise and less prone to naming conflicts.",
                  "example": "perm_1n9McEIBSqy44Qy7hzWyM5",
                  "minLength": 3
                },
                "name": {
                  "type": "string",
                  "description": "The name of the permission. Provide either ID or name. Names should match exactly with the permission name as it was defined.",
                  "example": "documents.write",
                  "minLength": 1
                },
                "create": {
                  "type": "boolean",
                  "description": "When true, if a permission with this name doesn't exist, it will be automatically created. Only works when specifying name, not ID. Requires the rbac.*.create_permission permission on your root key.",
                  "default": false
                }
              },
              "additionalProperties": false
            }
          }
        },
        "additionalProperties": false
      },
      "V2KeysSetPermissionsResponseData": {
        "type": "array",
        "description": "Complete list of all permissions now assigned to the key after the set operation (replaces all previous direct permissions)",
        "items": {
          "type": "object",
          "required": [
            "id",
            "name"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the permission",
              "example": "perm_1n9McEIBSqy44Qy7hzWyM5"
            },
            "name": {
              "type": "string",
              "description": "The name of the permission",
              "example": "documents.write"
            }
          }
        }
      },
      "V2KeysSetPermissionsResponse": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/V2KeysSetPermissionsResponseData"
          }
        }
      },
      "V2KeysAddRolesRequestBody": {
        "type": "object",
        "required": [
          "keyId",
          "roles"
        ],
        "properties": {
          "keyId": {
            "type": "string",
            "description": "The ID of the key to which roles will be added (begins with 'key_')",
            "example": "key_2cGKbMxRyIzhCxo1Idjz8q",
            "minLength": 3
          },
          "roles": {
            "type": "array",
            "minItems": 1,
            "description": "List of roles to add to the key. Each role can be identified by ID or name (if both are provided in the same object, ID takes precedence). Duplicate roles are automatically handled (adding the same role twice has no effect). Roles are collections of permissions that provide a convenient way to assign multiple permissions at once. During key verification, all permissions granted through roles are checked.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of an existing role (begins with 'role_'). Provide either ID or name. Use ID when you know the exact role identifier and want to ensure you're referencing a specific role.",
                  "example": "role_1n9McEIBSqy44Qy7hzWyM5",
                  "minLength": 3
                },
                "name": {
                  "type": "string",
                  "description": "The name of the role. Provide either ID or name. Role names are unique within a workspace and can be used to reference the role when you don't have the ID.",
                  "example": "admin",
                  "minLength": 1
                }
              },
              "additionalProperties": false
            }
          }
        },
        "additionalProperties": false
      },
      "V2KeysAddRolesResponseData": {
        "type": "array",
        "description": "Complete list of all roles directly assigned to the key (including both newly added roles and those that were already assigned). The list is always sorted alphabetically by role name for consistency. An empty array indicates the key has no roles assigned.",
        "items": {
          "type": "object",
          "required": [
            "id",
            "name"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the role (begins with 'role_'). This ID can be used in other API calls to reference this specific role.",
              "example": "role_1n9McEIBSqy44Qy7hzWyM5"
            },
            "name": {
              "type": "string",
              "description": "The name of the role. This is a human-readable identifier that's unique within your workspace.",
              "example": "admin"
            }
          }
        }
      },
      "V2KeysAddRolesResponse": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/V2KeysAddRolesResponseData"
          }
        }
      },
      "V2KeysCreateKeyRequestBody": {
        "type": "object",
        "required": [
          "apiId"
        ],
        "properties": {
          "apiId": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255,
            "description": "The ID of the API where this key should be created. Each key is associated with exactly one API, which helps segregate keys between different environments (dev/prod) and services.",
            "example": "api_2cGKbMxRjIzhCxo1IdjH3a"
          },
          "prefix": {
            "type": "string",
            "maxLength": 16,
            "description": "Optional prefix for the key that helps identify its purpose. The underscore is automatically added (e.g., 'prod' becomes 'prod_xxxxxxxxx'). Use prefixes like 'prod', 'dev', or service names to help users understand the key's purpose at a glance.",
            "example": "prod"
          },
          "name": {
            "type": "string",
            "description": "A human-readable name for the key for your internal reference. This is shown in dashboards and logs but never exposed to end users.",
            "example": "Payment Service Production Key"
          },
          "byteLength": {
            "type": "integer",
            "minimum": 16,
            "maximum": 255,
            "default": 16,
            "description": "Controls the cryptographic strength and length of the generated key. Higher values provide more security but result in longer keys. The default (16 bytes) provides 2^128 possible combinations, sufficient for most uses.",
            "example": 24
          },
          "externalId": {
            "type": "string",
            "description": "Your user's unique identifier, creating a link between Unkey and your system. This ID is returned during verification so you can identify which customer/entity is making the request. Use consistent IDs from your user management system.",
            "example": "user_912a841d"
          },
          "meta": {
            "type": "object",
            "additionalProperties": true,
            "description": "Arbitrary JSON metadata to associate with this key. This is useful for storing additional context like subscription plans, feature flags, or any custom data you'd like to access during verification without additional database lookups.",
            "example": {
              "plan": "enterprise",
              "featureFlags": {
                "betaAccess": true,
                "concurrentConnections": 10
              },
              "customerName": "Acme Corp"
            }
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 512
            },
            "description": "Roles to assign to this key for permission management. Each role represents a collection of permissions and must already exist in your workspace. During verification, all permissions from these roles will be checked against requested permissions.",
            "example": [
              "api_admin",
              "billing_reader"
            ]
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 512
            },
            "description": "Individual permissions to assign directly to this key. These are checked during verification alongside any permissions granted via roles. Use structured naming like 'resource.action' for clarity.",
            "example": [
              "documents.read",
              "documents.write",
              "settings.view"
            ]
          },
          "expires": {
            "type": "integer",
            "format": "int64",
            "description": "Unix timestamp (in milliseconds) when this key will automatically expire. Use temporary keys for time-limited access, one-time operations, or emergency access. After expiration, the key will fail verification with code EXPIRED.",
            "example": 1704067200000
          },
          "credits": {
            "type": "object",
            "required": [
              "remaining"
            ],
            "properties": {
              "remaining": {
                "type": "integer",
                "format": "int32",
                "description": "Number of times this key can be used before becoming invalid. Set to null for unlimited uses.",
                "example": 1000
              },
              "refill": {
                "type": "object",
                "properties": {
                  "interval": {
                    "type": "string",
                    "enum": [
                      "daily",
                      "monthly"
                    ],
                    "description": "How often the credits should be refilled."
                  },
                  "amount": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Number of credits to add during each refill."
                  },
                  "refillDay": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 31,
                    "description": "For monthly refills, the day of month when refills occur."
                  }
                },
                "required": [
                  "interval",
                  "amount"
                ],
                "description": "Configuration for automatic credit refills."
              }
            },
            "description": "Usage limits configuration for this key. Credits provide a way to limit the number of times a key can be used. Unlike ratelimits, these are guaranteed to be globally consistent (using database transactions) but add latency to verifications."
          },
          "ratelimits": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "limit",
                "duration"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Identifier for this ratelimit. Use descriptive names like 'requests' or 'computations'.",
                  "example": "requests"
                },
                "limit": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "description": "Maximum number of operations allowed within the time window.",
                  "example": 100
                },
                "duration": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1000,
                  "description": "Duration of the ratelimit window in milliseconds.",
                  "example": 60000
                }
              }
            },
            "description": "Array of ratelimits to apply to this key. Ratelimits provide protection against abuse by limiting how frequently a key can be used. Multiple named ratelimits can be used for different resources or operations (e.g., 'requests' for overall usage, 'computations' for expensive operations).",
            "example": [
              {
                "name": "requests",
                "limit": 100,
                "duration": 60000
              },
              {
                "name": "heavy_operations",
                "limit": 10,
                "duration": 3600000
              }
            ]
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the key is active upon creation. Disabled keys will fail verification with code DISABLED. This is useful for preparing keys that will be activated later or temporarily disabling access without deleting the key.",
            "example": true
          },
          "recoverable": {
            "type": "boolean",
            "default": false,
            "description": "If true, the plaintext key is stored in an encrypted vault, allowing it to be retrieved later. Use with caution as this reduces security by keeping a recoverable copy of the key. Best used for development keys or when absolutely necessary.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "KeysCreateKeyResponseData": {
        "type": "object",
        "properties": {
          "keyId": {
            "type": "string",
            "description": "The unique identifier for this key in Unkey's system. This is not secret and can be stored as a reference for later operations like updating or deleting the key.",
            "example": "key_2cGKbMxRyIzhCxo1Idjz8q"
          },
          "key": {
            "type": "string",
            "description": "The full generated API key that should be provided to your user. This is the only time you'll receive the complete key value - Unkey only stores a hashed version. Never store this value yourself; pass it securely to your end user.",
            "example": "prod_2cGKbMxRjIzhCxo1IdjH3arELti7Sdyc8w6XYbvtcyuBowPT"
          }
        },
        "required": [
          "keyId",
          "key"
        ]
      },
      "V2KeysCreateKeyResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/KeysCreateKeyResponseData"
          }
        }
      },
      "Meta": {
        "type": "object",
        "required": [
          "requestId"
        ],
        "properties": {
          "requestId": {
            "description": "A unique id for this request. Please always provide this to support.",
            "example": "req_123",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "cursor": {
            "description": "Opaque token for retrieving the next set of results",
            "example": "cursor_xyz123",
            "type": "string"
          },
          "hasMore": {
            "description": "Indicates if more results exist beyond this page",
            "example": true,
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BaseError": {
        "properties": {
          "detail": {
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "example": "Property foo is required but is missing.",
            "type": "string"
          },
          "instance": {
            "description": "A URI reference that identifies the specific occurrence of the problem.",
            "example": "https://example.com/error-log/abc123",
            "format": "uri",
            "type": "string"
          },
          "status": {
            "description": "HTTP status code",
            "example": 404,
            "format": "int",
            "type": "integer"
          },
          "title": {
            "description": "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
            "type": "string"
          },
          "type": {
            "description": "A URI reference to human-readable documentation for the error.",
            "example": "https://example.com/errors/example",
            "format": "uri",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "detail",
          "status",
          "title",
          "type"
        ]
      },
      "ValidationError": {
        "additionalProperties": false,
        "properties": {
          "location": {
            "description": "Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'",
            "type": "string"
          },
          "message": {
            "description": "Error message text",
            "type": "string"
          },
          "fix": {
            "description": "A human-readable message describing how to fix the error.",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "message",
          "location"
        ]
      },
      "BadRequestErrorDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "type": "object",
            "properties": {
              "errors": {
                "description": "Optional list of individual error details",
                "items": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "type": "array"
              }
            },
            "required": [
              "errors"
            ]
          }
        ]
      },
      "NotFoundErrorResponse": {
        "type": "object",
        "required": [
          "meta",
          "error"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "ConflictErrorResponse": {
        "type": "object",
        "required": [
          "meta",
          "error"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "UnauthorizedErrorResponse": {
        "type": "object",
        "required": [
          "meta",
          "error"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "ForbiddenErrorResponse": {
        "type": "object",
        "required": [
          "meta",
          "error"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "PreconditionFailedErrorResponse": {
        "type": "object",
        "required": [
          "meta",
          "error"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "BadRequestErrorResponse": {
        "type": "object",
        "required": [
          "meta",
          "error"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BadRequestErrorDetails"
          }
        }
      },
      "InternalServerErrorResponse": {
        "type": "object",
        "required": [
          "meta",
          "error"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "Identity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identity ID"
          },
          "externalId": {
            "type": "string",
            "description": "External identity ID"
          },
          "meta": {
            "type": "object",
            "description": "Identity metadata"
          }
        },
        "required": [
          "id",
          "externalId"
        ]
      },
      "KeyCredits": {
        "type": "object",
        "description": "Remaining requests for this key",
        "properties": {
          "remaining": {
            "type": "integer",
            "description": "Remaining credits"
          },
          "refill": {
            "$ref": "#/components/schemas/KeyCreditsRefill"
          }
        },
        "required": [
          "remaining"
        ]
      },
      "KeyCreditsRefill": {
        "type": "object",
        "properties": {
          "interval": {
            "type": "string",
            "enum": [
              "daily",
              "monthly"
            ],
            "description": "Refill interval"
          },
          "amount": {
            "type": "integer",
            "description": "Amount to refill"
          },
          "refillDay": {
            "type": "integer",
            "description": "Day of the month when refill happens (for monthly interval)"
          },
          "lastRefillAt": {
            "type": "integer",
            "format": "int64",
            "description": "Last time the key was refilled (Unix timestamp)"
          }
        },
        "required": [
          "interval",
          "amount"
        ]
      },
      "KeyResponse": {
        "type": "object",
        "properties": {
          "keyId": {
            "type": "string",
            "description": "The key ID"
          },
          "start": {
            "type": "string",
            "description": "The first few characters of the key"
          },
          "name": {
            "type": "string",
            "description": "Optional name for the key"
          },
          "meta": {
            "type": "object",
            "description": "Optional metadata for the key"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64",
            "description": "When the key was created (Unix timestamp)"
          },
          "updatedAt": {
            "type": "integer",
            "format": "int64",
            "description": "When the key was last updated (Unix timestamp)"
          },
          "expires": {
            "type": "integer",
            "format": "int64",
            "description": "When the key expires (Unix timestamp)"
          },
          "credits": {
            "$ref": "#/components/schemas/KeyCredits"
          },
          "environment": {
            "type": "string",
            "description": "Optional environment tag"
          },
          "plaintext": {
            "type": "string",
            "description": "The decrypted key value (only included if decrypt=true)"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Roles assigned to this key"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Permissions assigned to this key"
          },
          "identity": {
            "$ref": "#/components/schemas/Identity"
          }
        },
        "required": [
          "keyId",
          "start",
          "createdAt"
        ]
      },
      "LivenessResponseData": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Whether we're alive or not",
            "example": "OK",
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "V2LivenessResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/LivenessResponseData"
          }
        }
      },
      "V2RatelimitSetOverrideRequestBody": {
        "description": "Sets a new or overwrites an existing override.",
        "additionalProperties": false,
        "properties": {
          "namespaceId": {
            "description": "The id of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "namespaceName": {
            "description": "The name of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string"
          },
          "duration": {
            "description": "The duration in milliseconds for the rate limit window.",
            "format": "int64",
            "type": "integer",
            "minimum": 1000
          },
          "identifier": {
            "description": "Identifier of your user, this can be their userId, an email, an ip or anything else. Wildcards ( * ) can be used to match multiple identifiers, More info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "limit": {
            "description": "The maximum number of requests allowed.",
            "format": "int64",
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "identifier",
          "limit",
          "duration"
        ],
        "type": "object"
      },
      "RatelimitSetOverrideResponseData": {
        "type": "object",
        "properties": {
          "overrideId": {
            "description": "The id of the override. This is used internally.",
            "type": "string"
          }
        },
        "required": [
          "overrideId"
        ]
      },
      "V2RatelimitSetOverrideResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/RatelimitSetOverrideResponseData"
          }
        }
      },
      "V2RatelimitGetOverrideRequestBody": {
        "description": "Gets the configuration of an existing override.",
        "additionalProperties": false,
        "properties": {
          "namespaceId": {
            "description": "The id of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "namespaceName": {
            "description": "The name of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "identifier": {
            "description": "Identifier of your user, this can be their userId, an email, an ip or anything else. Wildcards ( * ) can be used to match multiple identifiers, More info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "V2RatelimitGetOverrideResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/RatelimitOverride"
          }
        }
      },
      "V2RatelimitListOverridesRequestBody": {
        "additionalProperties": false,
        "properties": {
          "namespaceId": {
            "description": "The id of the namespace to list overrides for.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "namespaceName": {
            "description": "The name of the namespace to list overrides for.",
            "type": "string"
          },
          "cursor": {
            "description": "Pagination cursor from a previous response",
            "type": "string"
          },
          "limit": {
            "description": "Maximum number of results to return",
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          }
        },
        "type": "object"
      },
      "RatelimitListOverridesResponseData": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RatelimitOverride"
        }
      },
      "V2RatelimitListOverridesResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/RatelimitListOverridesResponseData"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "V2RatelimitLimitRequestBody": {
        "additionalProperties": false,
        "properties": {
          "namespace": {
            "description": "The namespace name for the rate limit.",
            "type": "string",
            "example": "sms.sign_up",
            "minLength": 1,
            "maxLength": 255
          },
          "cost": {
            "description": "The cost of the request. Defaults to 1 if not provided.",
            "format": "int64",
            "type": "integer",
            "default": 1,
            "minimum": 0
          },
          "duration": {
            "description": "The duration in milliseconds for the rate limit window.",
            "format": "int64",
            "type": "integer",
            "minimum": 1000,
            "maximum": 86400000
          },
          "identifier": {
            "description": "The identifier for the rate limit.",
            "type": "string"
          },
          "limit": {
            "description": "The maximum number of requests allowed.",
            "format": "int64",
            "type": "integer",
            "minimum": 1
          }
        },
        "required": [
          "namespace",
          "identifier",
          "limit",
          "duration"
        ],
        "type": "object"
      },
      "RatelimitLimitResponseData": {
        "type": "object",
        "properties": {
          "limit": {
            "description": "The maximum number of requests allowed.",
            "format": "int64",
            "type": "integer"
          },
          "remaining": {
            "description": "The number of requests remaining in the current window.",
            "format": "int64",
            "type": "integer"
          },
          "reset": {
            "description": "The time in milliseconds when the rate limit will reset.",
            "format": "int64",
            "type": "integer"
          },
          "success": {
            "description": "Whether the request passed the ratelimit. If false, the request must be blocked.",
            "type": "boolean"
          },
          "overrideId": {
            "description": "The override that was used. May be empty",
            "type": "string"
          }
        },
        "required": [
          "limit",
          "remaining",
          "reset",
          "success"
        ]
      },
      "V2RatelimitLimitResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/RatelimitLimitResponseData"
          }
        }
      },
      "V2RatelimitDeleteOverrideRequestBody": {
        "description": "Deletes an existing override.",
        "additionalProperties": false,
        "properties": {
          "namespaceId": {
            "description": "The id of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "namespaceName": {
            "description": "The name of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "identifier": {
            "description": "Identifier of the override to delete",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "RatelimitDeleteOverrideResponseData": {
        "type": "object",
        "additionalProperties": false
      },
      "V2RatelimitDeleteOverrideResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/RatelimitDeleteOverrideResponseData"
          }
        }
      },
      "V2IdentitiesCreateIdentityRequestBody": {
        "type": "object",
        "required": [
          "externalId"
        ],
        "properties": {
          "externalId": {
            "type": "string",
            "minLength": 3,
            "description": "The id of this identity in your system.\n\nThis usually comes from your authentication provider and could be a userId, organisationId or even an email.\nIt does not matter what you use, as long as it uniquely identifies something in your application.\n\n`externalId`s are unique across your workspace and therefore a `CONFLICT` error is returned when you try to create duplicates.\n",
            "example": "user_123"
          },
          "meta": {
            "type": "object",
            "description": "Attach metadata to this identity that you need to have access to when verifying a key.\n\nThis will be returned as part of the `verifyKey` response.\n"
          },
          "ratelimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ratelimit"
            },
            "description": "Attach ratelimits to this identity.\n\nWhen verifying keys, you can specify which limits you want to use and all keys attached to this identity, will share the limits."
          }
        }
      },
      "Ratelimit": {
        "type": "object",
        "required": [
          "name",
          "limit",
          "duration"
        ],
        "properties": {
          "name": {
            "description": "The name of this limit. You will need to use this again when verifying a key.",
            "type": "string",
            "example": "api",
            "minLength": 3,
            "maxLength": 128
          },
          "limit": {
            "description": "How many requests may pass within a given window before requests are rejected.",
            "type": "integer",
            "format": "int64"
          },
          "duration": {
            "description": "The duration for each ratelimit window in milliseconds.",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "IdentitiesCreateIdentityResponseData": {
        "type": "object",
        "properties": {
          "identityId": {
            "description": "The id of the identity. Used internally, you do not need to store this.",
            "type": "string"
          }
        },
        "required": [
          "identityId"
        ]
      },
      "V2IdentitiesCreateIdentityResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/IdentitiesCreateIdentityResponseData"
          }
        }
      },
      "V2IdentitiesDeleteIdentityRequestBody": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "minLength": 3,
            "description": "The id of this identity in your system.\n\nThis usually comes from your authentication provider and could be a userId, organisationId or even an email.\nIt does not matter what you use, as long as it uniquely identifies something in your application.\n",
            "example": "user_123"
          },
          "identityId": {
            "type": "string",
            "minLength": 3,
            "description": "The Unkey Identity ID.",
            "example": "id_123"
          }
        },
        "oneOf": [
          {
            "required": [
              "externalId"
            ]
          },
          {
            "required": [
              "identityId"
            ]
          }
        ]
      },
      "V2IdentitiesDeleteIdentityResponseBody": {
        "type": "object"
      },
      "Permission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the permission"
          },
          "name": {
            "type": "string",
            "description": "The unique name of the permission"
          },
          "description": {
            "type": "string",
            "description": "A description of what this permission grants access to"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace this permission belongs to"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the permission was created"
          }
        },
        "required": [
          "id",
          "name",
          "workspaceId"
        ]
      },
      "V2PermissionsCreatePermissionRequestBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The unique name of your permission",
            "example": "record.write"
          },
          "description": {
            "type": "string",
            "description": "Explain what this permission does. This is just for your team, your users will not see this.",
            "example": "record.write can create new dns records for our domains."
          }
        },
        "additionalProperties": false
      },
      "PermissionsCreatePermissionResponseData": {
        "type": "object",
        "properties": {
          "permissionId": {
            "type": "string",
            "description": "The id of the permission. This is used internally",
            "example": "perm_123"
          }
        },
        "required": [
          "permissionId"
        ]
      },
      "V2PermissionsCreatePermissionResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/PermissionsCreatePermissionResponseData"
          }
        }
      },
      "V2PermissionsGetPermissionRequestBody": {
        "type": "object",
        "required": [
          "permissionId"
        ],
        "properties": {
          "permissionId": {
            "type": "string",
            "minLength": 1,
            "description": "The id of the permission to retrieve",
            "example": "perm_123"
          }
        },
        "additionalProperties": false
      },
      "PermissionsGetPermissionResponseData": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/Permission"
          }
        },
        "required": [
          "permission"
        ]
      },
      "V2PermissionsGetPermissionResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/PermissionsGetPermissionResponseData"
          }
        }
      },
      "V2PermissionsListPermissionsRequestBody": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of permissions to return",
            "default": 100,
            "minimum": 1,
            "maximum": 100
          },
          "cursor": {
            "type": "string",
            "description": "Cursor for pagination"
          }
        },
        "additionalProperties": false
      },
      "PermissionsListPermissionsResponseData": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "cursor": {
            "type": "string",
            "description": "Cursor for pagination"
          },
          "total": {
            "type": "integer",
            "description": "Total number of permissions"
          }
        },
        "required": [
          "permissions",
          "total"
        ]
      },
      "V2PermissionsListPermissionsResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/PermissionsListPermissionsResponseData"
          }
        }
      },
      "V2PermissionsListRolesRequestBody": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of roles to return",
            "default": 100,
            "minimum": 1,
            "maximum": 100
          },
          "cursor": {
            "type": "string",
            "description": "Cursor for pagination"
          }
        },
        "additionalProperties": false
      },
      "PermissionsListRolesResponseData": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleWithPermissions"
            }
          },
          "cursor": {
            "type": "string",
            "description": "Cursor for pagination"
          },
          "total": {
            "type": "integer",
            "description": "Total number of roles"
          }
        },
        "required": [
          "roles",
          "total"
        ]
      },
      "V2PermissionsDeleteRoleRequestBody": {
        "type": "object",
        "required": [
          "roleId"
        ],
        "properties": {
          "roleId": {
            "type": "string",
            "minLength": 1,
            "description": "The id of the role to delete",
            "example": "role_123"
          }
        },
        "additionalProperties": false
      },
      "V2PermissionsDeleteRoleResponseBody": {
        "type": "object",
        "required": [
          "meta"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "V2PermissionsListRolesResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/PermissionsListRolesResponseData"
          }
        }
      },
      "V2PermissionsDeletePermissionRequestBody": {
        "type": "object",
        "required": [
          "permissionId"
        ],
        "properties": {
          "permissionId": {
            "type": "string",
            "minLength": 1,
            "description": "The id of the permission to delete",
            "example": "perm_123"
          }
        },
        "additionalProperties": false
      },
      "V2PermissionsDeletePermissionResponseBody": {
        "type": "object",
        "required": [
          "meta"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "V2PermissionsCreateRoleRequestBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The unique name of your role",
            "example": "dns.records.manager"
          },
          "description": {
            "type": "string",
            "description": "Explain what this role does. This is just for your team, your users will not see this.",
            "example": "dns.records.manager can read and write dns records for our domains."
          },
          "permissionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The permission IDs to assign to this role"
          }
        },
        "additionalProperties": false
      },
      "PermissionsCreateRoleResponseData": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "string",
            "description": "The id of the role. This is used internally",
            "example": "role_123"
          }
        },
        "required": [
          "roleId"
        ]
      },
      "V2PermissionsCreateRoleResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/PermissionsCreateRoleResponseData"
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the role"
          },
          "name": {
            "type": "string",
            "description": "The unique name of the role"
          },
          "description": {
            "type": "string",
            "description": "A description of what this role represents"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace this role belongs to"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the role was created"
          }
        },
        "required": [
          "id",
          "name",
          "workspaceId"
        ]
      },
      "RoleWithPermissions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the role"
          },
          "name": {
            "type": "string",
            "description": "The unique name of the role"
          },
          "description": {
            "type": "string",
            "description": "A description of what this role represents"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace this role belongs to"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the role was created"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "description": "The permissions assigned to this role"
          }
        },
        "required": [
          "id",
          "name",
          "workspaceId",
          "permissions"
        ]
      },
      "V2PermissionsGetRoleRequestBody": {
        "type": "object",
        "required": [
          "roleId"
        ],
        "properties": {
          "roleId": {
            "type": "string",
            "minLength": 1,
            "description": "The id of the role to retrieve",
            "example": "role_123"
          }
        },
        "additionalProperties": false
      },
      "PermissionsGetRoleResponseData": {
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/RoleWithPermissions"
          }
        },
        "required": [
          "role"
        ]
      },
      "V2PermissionsGetRoleResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/PermissionsGetRoleResponseData"
          }
        }
      },
      "V2ApisCreateApiRequestBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "description": "The name for your API. This is not customer facing.",
            "example": "my-api"
          }
        },
        "additionalProperties": false
      },
      "ApisCreateApiResponseData": {
        "type": "object",
        "properties": {
          "apiId": {
            "description": "The id of the API",
            "type": "string"
          }
        },
        "required": [
          "apiId"
        ]
      },
      "V2ApisDeleteApiRequestBody": {
        "type": "object",
        "required": [
          "apiId"
        ],
        "properties": {
          "apiId": {
            "type": "string",
            "minLength": 3,
            "description": "The id of the API you want to delete. API ids always start with `api_`",
            "example": "api_VNcuGfVjUkrVcWJmda0A"
          }
        },
        "additionalProperties": false
      },
      "V2ApisGetApiRequestBody": {
        "type": "object",
        "required": [
          "apiId"
        ],
        "properties": {
          "apiId": {
            "type": "string",
            "minLength": 1,
            "description": "The id of the api to fetch",
            "example": "api_1234"
          }
        },
        "additionalProperties": false
      },
      "ApisGetApiResponseData": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the API",
            "type": "string"
          },
          "name": {
            "description": "The name of the API",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "V2ApisCreateApiResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/ApisCreateApiResponseData"
          }
        }
      },
      "V2ApisDeleteApiResponseBody": {
        "type": "object",
        "required": [
          "meta"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "V2ApisGetApiResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/ApisGetApiResponseData"
          }
        }
      },
      "V2ApisListKeysRequestBody": {
        "type": "object",
        "required": [
          "apiId"
        ],
        "properties": {
          "apiId": {
            "type": "string",
            "minLength": 1,
            "description": "The id of the api to fetch",
            "example": "api_1234"
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of keys to return",
            "default": 100,
            "minimum": 1,
            "maximum": 100
          },
          "cursor": {
            "type": "string",
            "description": "Use this to fetch the next page of results. A new cursor will be returned in the response if there are more results."
          },
          "externalId": {
            "type": "string",
            "minLength": 3,
            "description": "If provided, this will only return keys where the `externalId` matches."
          },
          "decrypt": {
            "type": "boolean",
            "description": "Decrypt and display the raw key. Only possible if the key was encrypted when generated."
          },
          "revalidateKeysCache": {
            "type": "boolean",
            "default": false,
            "description": "EXPERIMENTAL: Skip the cache and fetch the keys from the database directly. When you're creating a key and immediately listing all keys to display them to your user, you might want to skip the cache to ensure the key is displayed immediately."
          }
        },
        "additionalProperties": false
      },
      "ApisListKeysResponseData": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/KeyResponse"
        }
      },
      "V2ApisListKeysResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/ApisListKeysResponseData"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "RatelimitOverride": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "namespaceId": {
            "description": "The id of the namespace.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "overrideId": {
            "description": "The id of the override.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "duration": {
            "description": "The duration in milliseconds for the rate limit window.",
            "format": "int64",
            "type": "integer",
            "minimum": 1000
          },
          "identifier": {
            "description": "Identifier of your user, this can be their userId, an email, an ip or anything else. Wildcards ( * ) can be used to match multiple identifiers, More info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "limit": {
            "description": "The maximum number of requests allowed.",
            "format": "int64",
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "namespaceId",
          "overrideId",
          "duration",
          "identifier",
          "limit"
        ]
      },
      "V2KeysWhoamiRequestBody": {
        "type": "object",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "The API key to identify and retrieve information about",
            "example": "sk_1234567890abcdef",
            "minLength": 1
          }
        },
        "additionalProperties": false
      },
      "KeyWhoamiData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the key",
            "example": "key_1234567890abcdef"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The human-readable name of the key (optional)",
            "example": "Production API Key"
          },
          "remaining": {
            "type": "integer",
            "nullable": true,
            "format": "int64",
            "description": "The remaining number of requests for the key (null means unlimited)",
            "example": 1000
          },
          "identity": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique identity ID associated with the key",
                "example": "id_1234567890abcdef"
              },
              "externalId": {
                "type": "string",
                "description": "The external identity ID associated with the key (e.g., user ID in your system)",
                "example": "user_12345"
              }
            },
            "required": [
              "id",
              "externalId"
            ],
            "description": "The identity object associated with the key (null if no identity is associated)"
          },
          "meta": {
            "type": "object",
            "nullable": true,
            "additionalProperties": true,
            "description": "Custom metadata associated with the key (null if no metadata is present)",
            "example": {
              "role": "admin",
              "plan": "premium",
              "teamId": "team_12345"
            }
          },
          "createdAt": {
            "type": "integer",
            "format": "int64",
            "description": "The timestamp in milliseconds when the key was created",
            "example": 1620000000000
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the key is enabled and can be used",
            "example": true
          },
          "environment": {
            "type": "string",
            "nullable": true,
            "description": "The environment the key is associated with (e.g., production, staging, development)",
            "example": "production"
          }
        },
        "required": [
          "id",
          "createdAt",
          "enabled"
        ]
      },
      "V2KeysWhoamiResponse": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/KeyWhoamiData"
          }
        }
      },
      "V2KeysVerifyKeyRequestBody": {
        "type": "object",
        "required": [
          "apiId",
          "key"
        ],
        "properties": {
          "apiId": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255,
            "description": "The ID of the API where the key belongs to. Required to ensure keys from development environments aren't leaking into production and vice versa.",
            "example": "api_1234"
          },
          "key": {
            "type": "string",
            "minLength": 1,
            "description": "The key to verify. Never store API keys yourself.",
            "example": "sk_1234"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 128
            },
            "maxItems": 10,
            "description": "Tags do not influence the outcome of a verification. They can be added to filter or aggregate historical verification data for your analytics needs.",
            "example": [
              "path=/v1/users/123",
              "region=us-east-1"
            ]
          },
          "permissions": {
            "oneOf": [
              {
                "type": "string",
                "description": "A single permission to check"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "and",
                      "or"
                    ],
                    "description": "Logical operator to apply to the permissions"
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of permissions to check"
                  }
                },
                "required": [
                  "type",
                  "permissions"
                ]
              }
            ],
            "description": "Perform RBAC permission checks"
          },
          "credits": {
            "type": "object",
            "properties": {
              "cost": {
                "type": "integer",
                "format": "int32",
                "default": 1,
                "description": "How many tokens should be deducted from the current credits. Set it to 0 to make it free."
              }
            },
            "description": "Customize the behavior of deducting remaining uses. When some of your endpoints are more expensive than others, you can set a custom cost for each."
          },
          "ratelimits": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "description": "The name of the ratelimit.",
                  "example": "tokens"
                },
                "cost": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "default": 1,
                  "description": "Optionally override how expensive this operation is and how many tokens are deducted from the current limit."
                },
                "limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Optionally override the limit."
                },
                "duration": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Optionally override the ratelimit window duration."
                }
              }
            },
            "description": "You can check against multiple ratelimits when verifying a key."
          }
        },
        "additionalProperties": false
      },
      "KeysVerifyKeyResponseData": {
        "type": "object",
        "properties": {
          "keyId": {
            "type": "string",
            "description": "The id of the key"
          },
          "valid": {
            "type": "boolean",
            "description": "Whether the key is valid or not."
          },
          "name": {
            "type": "string",
            "description": "The name of the key, give keys a name to easily identify their purpose"
          },
          "externalId": {
            "type": "string",
            "description": "The id of the tenant associated with this key."
          },
          "meta": {
            "type": "object",
            "additionalProperties": true,
            "description": "Any additional metadata stored with the key"
          },
          "expires": {
            "type": "integer",
            "format": "int64",
            "description": "The unix timestamp in milliseconds when the key will expire. If null or undefined, the key is not expiring."
          },
          "credits": {
            "type": "integer",
            "format": "int32",
            "description": "The number of requests that can be made with this key before it becomes invalid. If null or undefined, the key has no request limit."
          },
          "enabled": {
            "type": "boolean",
            "description": "Sets the key to be enabled or disabled. Disabled keys will not verify."
          },
          "code": {
            "type": "string",
            "enum": [
              "VALID",
              "NOT_FOUND",
              "FORBIDDEN",
              "USAGE_EXCEEDED",
              "RATE_LIMITED",
              "UNAUTHORIZED",
              "DISABLED",
              "INSUFFICIENT_PERMISSIONS",
              "EXPIRED"
            ],
            "description": "A machine readable code why the key is not valid. Possible values are: VALID, NOT_FOUND, FORBIDDEN, USAGE_EXCEEDED, RATE_LIMITED, UNAUTHORIZED, DISABLED, INSUFFICIENT_PERMISSIONS, EXPIRED"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of all the permissions this key is connected to."
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of all the roles this key is connected to."
          },
          "environment": {
            "type": "string",
            "description": "The environment of the key, this is what was set when you created the key"
          },
          "identity": {
            "$ref": "#/components/schemas/Identity",
            "description": "The associated identity of this key."
          },
          "ratelimits": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "limit",
                "remaining",
                "reset"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the ratelimit"
                },
                "limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of requests that can be made inside a window"
                },
                "remaining": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Remaining requests after this verification"
                },
                "reset": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Unix timestamp in milliseconds when the ratelimit will reset"
                }
              }
            },
            "description": "Ratelimit information for the key"
          }
        },
        "required": [
          "valid",
          "code"
        ]
      },
      "V2KeysVerifyKeyResponseBody": {
        "type": "object",
        "required": [
          "meta",
          "data"
        ],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/KeysVerifyKeyResponseData"
          }
        }
      }
    }
  },
  "paths": {
    "/v2/keys.whoami": {
      "post": {
        "tags": [
          "keys"
        ],
        "summary": "Get information about an API key",
        "description": "Retrieves detailed information about an API key without incrementing its usage counter",
        "operationId": "whoami",
        "x-speakeasy-name-override": "whoami",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2KeysWhoamiRequestBody"
              },
              "examples": {
                "basic": {
                  "summary": "Basic key lookup",
                  "value": {
                    "key": "sk_1234567890abcdef"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Key information successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2KeysWhoamiResponse"
                },
                "examples": {
                  "full": {
                    "summary": "Complete key information",
                    "value": {
                      "meta": {
                        "requestId": "req_1234567890abcdef"
                      },
                      "data": {
                        "id": "key_1234567890abcdef",
                        "name": "Production API Key",
                        "remaining": 1000,
                        "identity": {
                          "id": "id_1234567890abcdef",
                          "externalId": "user_12345"
                        },
                        "meta": {
                          "role": "admin",
                          "plan": "premium",
                          "teamId": "team_12345"
                        },
                        "createdAt": 1620000000000,
                        "enabled": true,
                        "environment": "production"
                      }
                    }
                  },
                  "minimal": {
                    "summary": "Key with minimal information",
                    "value": {
                      "meta": {
                        "requestId": "req_1234567890abcdef"
                      },
                      "data": {
                        "id": "key_1234567890abcdef",
                        "createdAt": 1620000000000,
                        "enabled": true
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/keys.setPermissions": {
      "post": {
        "tags": [
          "keys"
        ],
        "summary": "Set (replace) all permissions on an API key",
        "description": "Sets the permissions for an existing API key by replacing all existing direct permissions with the provided ones. Unlike addPermissions or removePermissions which modify existing permissions, this endpoint completely replaces the permission set. Providing an empty permissions array will remove all direct permissions from the key. This makes it useful for synchronizing key permissions with an external system or for reset operations. Only affects direct permissions on the key, not permissions granted through roles. Changes take effect immediately for new verifications, though existing authorized sessions may continue until their cache expires.",
        "operationId": "setPermissions",
        "x-speakeasy-name-override": "setPermissions",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2KeysSetPermissionsRequestBody"
              },
              "examples": {
                "removeAll": {
                  "summary": "Remove all permissions from key",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "permissions": []
                  }
                },
                "basic": {
                  "summary": "Set permissions using IDs",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "permissions": [
                      {
                        "id": "perm_1n9McEIBSqy44Qy7hzWyM5"
                      },
                      {
                        "id": "perm_2zF4mNyP9BsRj2aQwDxVkT"
                      }
                    ]
                  }
                },
                "withNames": {
                  "summary": "Set permissions using names",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "permissions": [
                      {
                        "name": "documents.write"
                      },
                      {
                        "name": "documents.delete"
                      }
                    ]
                  }
                },
                "withCreation": {
                  "summary": "Set with permission creation",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "permissions": [
                      {
                        "name": "documents.write"
                      },
                      {
                        "name": "reports.export",
                        "create": true
                      },
                      {
                        "name": "reports.schedule",
                        "create": true
                      }
                    ]
                  }
                },
                "mixed": {
                  "summary": "Mix of ID and name references",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "permissions": [
                      {
                        "id": "perm_1n9McEIBSqy44Qy7hzWyM5"
                      },
                      {
                        "name": "documents.delete"
                      },
                      {
                        "name": "reports.view",
                        "create": true
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Permissions successfully set on the key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2KeysSetPermissionsResponse"
                },
                "examples": {
                  "standard": {
                    "summary": "Complete list of permissions",
                    "value": {
                      "meta": {
                        "requestId": "req_2cGKbMxRyIzhCxo1Idjz8q"
                      },
                      "data": [
                        {
                          "id": "perm_1n9McEIBSqy44Qy7hzWyM5",
                          "name": "documents.write"
                        },
                        {
                          "id": "perm_2zF4mNyP9BsRj2aQwDxVkT",
                          "name": "documents.delete"
                        },
                        {
                          "id": "perm_3qRsTu2vWxYzAbCdEfGhIj",
                          "name": "reports.view"
                        }
                      ]
                    }
                  },
                  "empty": {
                    "summary": "All permissions removed",
                    "value": {
                      "meta": {
                        "requestId": "req_3qRsTu2vWxYzAbCdEfGhIj"
                      },
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid keyId format, missing required fields, or malformed permission entries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "examples": {
                  "invalidKeyId": {
                    "summary": "Invalid keyId format",
                    "value": {
                      "meta": {
                        "requestId": "req_5zAbCdEfGhIjKlMnOpQrSt"
                      },
                      "error": {
                        "title": "Bad Request",
                        "detail": "keyId must start with 'key_'",
                        "status": 400,
                        "type": "bad_request"
                      }
                    }
                  },
                  "emptyPermissions": {
                    "summary": "Empty permissions array",
                    "value": {
                      "meta": {
                        "requestId": "req_6aBcDeFgHiJkLmNoPqRsT"
                      },
                      "error": {
                        "title": "Bad Request",
                        "detail": "At least one permission must be specified",
                        "status": 400,
                        "type": "bad_request"
                      }
                    }
                  },
                  "missingIdentifier": {
                    "summary": "Permission missing both id and name",
                    "value": {
                      "meta": {
                        "requestId": "req_7bCdEfGhIjKlMnOpQrStUv"
                      },
                      "error": {
                        "title": "Bad Request",
                        "detail": "Each permission must include either id or name",
                        "status": 400,
                        "type": "bad_request"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                },
                "examples": {
                  "invalidRootKey": {
                    "summary": "Invalid root key provided",
                    "value": {
                      "meta": {
                        "requestId": "req_9tUv3wXyZaAbCdEfGhIjKl"
                      },
                      "error": {
                        "title": "Unauthorized",
                        "detail": "The root key provided is invalid or has been revoked.",
                        "status": 401,
                        "type": "unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires 'rbac.*.add_permission_to_key' and 'rbac.*.remove_permission_from_key' and potentially 'rbac.*.create_permission')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                },
                "examples": {
                  "missingAddPermission": {
                    "summary": "Missing add permission",
                    "value": {
                      "meta": {
                        "requestId": "req_0uVwX4yZaAbCdEfGhIjKl"
                      },
                      "error": {
                        "title": "Forbidden",
                        "detail": "Your root key requires the 'rbac.*.add_permission_to_key' permission to perform this operation",
                        "status": 403,
                        "type": "forbidden"
                      }
                    }
                  },
                  "missingRemovePermission": {
                    "summary": "Missing remove permission",
                    "value": {
                      "meta": {
                        "requestId": "req_1vWxYzAbCdEfGhIjKlMnOp"
                      },
                      "error": {
                        "title": "Forbidden",
                        "detail": "Your root key requires the 'rbac.*.remove_permission_from_key' permission to perform this operation",
                        "status": 403,
                        "type": "forbidden"
                      }
                    }
                  },
                  "missingCreatePermission": {
                    "summary": "Cannot create new permissions",
                    "value": {
                      "meta": {
                        "requestId": "req_4bVcWdXeYfZgHiJkLmNoPq"
                      },
                      "error": {
                        "title": "Forbidden",
                        "detail": "Your root key requires the 'rbac.*.create_permission' permission to create new permissions",
                        "status": 403,
                        "type": "forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Key not found or specified permission IDs don't exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                },
                "examples": {
                  "keyNotFound": {
                    "summary": "Key not found",
                    "value": {
                      "meta": {
                        "requestId": "req_2wXyZaAbCdEfGhIjKlMnOp"
                      },
                      "error": {
                        "title": "Not Found",
                        "detail": "Key key_2cGKbMxRyIzhCxo1Idjz8q not found",
                        "status": 404,
                        "type": "not_found"
                      }
                    }
                  },
                  "permissionNotFound": {
                    "summary": "Permission not found",
                    "value": {
                      "meta": {
                        "requestId": "req_3xYzAbCdEfGhIjKlMnOpQr"
                      },
                      "error": {
                        "title": "Not Found",
                        "detail": "Permission perm_1n9McEIBSqy44Qy7hzWyM5 not found and not allowed to create",
                        "status": 404,
                        "type": "not_found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                },
                "examples": {
                  "databaseError": {
                    "summary": "Database error",
                    "value": {
                      "meta": {
                        "requestId": "req_4yZaAbCdEfGhIjKlMnOpQrS"
                      },
                      "error": {
                        "title": "Internal Server Error",
                        "detail": "An unexpected error occurred while processing your request. Please try again later.",
                        "status": 500,
                        "type": "internal_server_error"
                      }
                    }
                  },
                  "cachingError": {
                    "summary": "Cache invalidation error",
                    "value": {
                      "meta": {
                        "requestId": "req_5zAbCdEfGhIjKlMnOpQrSt"
                      },
                      "error": {
                        "title": "Internal Server Error",
                        "detail": "The permissions were successfully set but there was an error invalidating cached keys. Some systems may temporarily see stale data.",
                        "status": 500,
                        "type": "internal_server_error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/keys.removePermissions": {
      "post": {
        "tags": [
          "keys"
        ],
        "summary": "Remove permissions from an API key",
        "description": "Removes one or more permissions from an existing API key. This endpoint allows you to revoke specific capabilities from a key while leaving the key otherwise intact. This only affects direct permissions on the key, not permissions granted through roles. When permissions are removed, it takes effect immediately for new verifications, though existing authorized sessions may continue until their cache expires. Removing permissions that aren't assigned to the key is a no-op and doesn't cause an error.",
        "operationId": "removePermissions",
        "x-speakeasy-name-override": "removePermissions",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2KeysRemovePermissionsRequestBody"
              },
              "examples": {
                "removeAll": {
                  "summary": "Remove all permissions from key",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "permissions": []
                  }
                },
                "basic": {
                  "summary": "Remove permissions using IDs",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "permissions": [
                      {
                        "id": "perm_1n9McEIBSqy44Qy7hzWyM5"
                      },
                      {
                        "id": "perm_2zF4mNyP9BsRj2aQwDxVkT"
                      }
                    ]
                  }
                },
                "withNames": {
                  "summary": "Remove permissions using names",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "permissions": [
                      {
                        "name": "documents.write"
                      },
                      {
                        "name": "documents.delete"
                      }
                    ]
                  }
                },
                "mixed": {
                  "summary": "Mix of ID and name references",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "permissions": [
                      {
                        "id": "perm_1n9McEIBSqy44Qy7hzWyM5"
                      },
                      {
                        "name": "reports.export"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Permissions successfully removed from the key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2KeysRemovePermissionsResponse"
                },
                "examples": {
                  "standard": {
                    "summary": "Successful removal",
                    "value": {
                      "meta": {
                        "requestId": "req_2cGKbMxRyIzhCxo1Idjz8q"
                      },
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid keyId format, missing required fields, or malformed permission entries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "examples": {
                  "invalidKeyId": {
                    "summary": "Invalid keyId format",
                    "value": {
                      "meta": {
                        "requestId": "req_5zAbCdEfGhIjKlMnOpQrSt"
                      },
                      "error": {
                        "title": "Bad Request",
                        "detail": "keyId must start with 'key_'",
                        "status": 400,
                        "type": "bad_request"
                      }
                    }
                  },
                  "emptyPermissions": {
                    "summary": "Empty permissions array",
                    "value": {
                      "meta": {
                        "requestId": "req_6aBcDeFgHiJkLmNoPqRsT"
                      },
                      "error": {
                        "title": "Bad Request",
                        "detail": "At least one permission must be specified",
                        "status": 400,
                        "type": "bad_request"
                      }
                    }
                  },
                  "missingIdentifier": {
                    "summary": "Permission missing both id and name",
                    "value": {
                      "meta": {
                        "requestId": "req_7bCdEfGhIjKlMnOpQrStUv"
                      },
                      "error": {
                        "title": "Bad Request",
                        "detail": "Each permission must include either id or name",
                        "status": 400,
                        "type": "bad_request"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                },
                "examples": {
                  "invalidRootKey": {
                    "summary": "Invalid root key provided",
                    "value": {
                      "meta": {
                        "requestId": "req_9tUv3wXyZaAbCdEfGhIjKl"
                      },
                      "error": {
                        "title": "Unauthorized",
                        "detail": "The root key provided is invalid or has been revoked.",
                        "status": 401,
                        "type": "unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires 'rbac.*.remove_permission_from_key')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                },
                "examples": {
                  "missingPermission": {
                    "summary": "Missing required permission",
                    "value": {
                      "meta": {
                        "requestId": "req_0uVwX4yZaAbCdEfGhIjKl"
                      },
                      "error": {
                        "title": "Forbidden",
                        "detail": "Your root key requires the 'rbac.*.remove_permission_from_key' permission to perform this operation",
                        "status": 403,
                        "type": "forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Key not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                },
                "examples": {
                  "keyNotFound": {
                    "summary": "Key not found",
                    "value": {
                      "meta": {
                        "requestId": "req_2wXyZaAbCdEfGhIjKlMnOp"
                      },
                      "error": {
                        "title": "Not Found",
                        "detail": "Key key_2cGKbMxRyIzhCxo1Idjz8q not found",
                        "status": 404,
                        "type": "not_found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                },
                "examples": {
                  "databaseError": {
                    "summary": "Database error",
                    "value": {
                      "meta": {
                        "requestId": "req_4yZaAbCdEfGhIjKlMnOpQrS"
                      },
                      "error": {
                        "title": "Internal Server Error",
                        "detail": "An unexpected error occurred while processing your request. Please try again later.",
                        "status": 500,
                        "type": "internal_server_error"
                      }
                    }
                  },
                  "cachingError": {
                    "summary": "Cache invalidation error",
                    "value": {
                      "meta": {
                        "requestId": "req_5zAbCdEfGhIjKlMnOpQrSt"
                      },
                      "error": {
                        "title": "Internal Server Error",
                        "detail": "The permissions were successfully removed but there was an error invalidating cached keys. Some systems may temporarily see stale data.",
                        "status": 500,
                        "type": "internal_server_error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/keys.addRoles": {
      "post": {
        "tags": [
          "keys"
        ],
        "summary": "Add roles to an API key",
        "description": "Assigns one or more roles to an existing API key. Roles are collections of permissions that provide a convenient way to assign multiple permissions at once. During key verification, all permissions granted through roles are checked. This endpoint is idempotent - adding the same role multiple times has no additional effect. The operation atomically adds all valid roles, and rollback occurs if any role cannot be added. After roles are added, any cached versions of the key are invalidated to ensure consistency.",
        "operationId": "addRoles",
        "x-speakeasy-name-override": "addRoles",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2KeysAddRolesRequestBody"
              },
              "examples": {
                "basic": {
                  "summary": "Adding roles by ID",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "roles": [
                      {
                        "id": "role_1n9McEIBSqy44Qy7hzWyM5"
                      },
                      {
                        "id": "role_2a8NdFJCTrz55Ry8Jdkz9r"
                      }
                    ]
                  }
                },
                "withNames": {
                  "summary": "Adding roles by name",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "roles": [
                      {
                        "name": "admin"
                      },
                      {
                        "name": "billing_manager"
                      }
                    ]
                  }
                },
                "mixed": {
                  "summary": "Adding roles by mixed identifiers",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "roles": [
                      {
                        "id": "role_1n9McEIBSqy44Qy7hzWyM5"
                      },
                      {
                        "name": "billing_manager"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Roles successfully added to the key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2KeysAddRolesResponse"
                },
                "examples": {
                  "standard": {
                    "summary": "Complete list of roles",
                    "value": {
                      "meta": {
                        "requestId": "req_1234567890abcdef"
                      },
                      "data": [
                        {
                          "id": "role_1n9McEIBSqy44Qy7hzWyM5",
                          "name": "admin"
                        },
                        {
                          "id": "role_2a8NdFJCTrz55Ry8Jdkz9r",
                          "name": "billing_manager"
                        },
                        {
                          "id": "role_3b9OeGKDUsy66Sz9Kelz0s",
                          "name": "developer"
                        }
                      ]
                    }
                  },
                  "empty": {
                    "summary": "No roles assigned",
                    "value": {
                      "meta": {
                        "requestId": "req_1234567890abcdef"
                      },
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/keys.addPermissions": {
      "post": {
        "tags": [
          "keys"
        ],
        "summary": "Add permissions to an API key",
        "description": "Assigns one or more permissions to an existing API key. Permissions define access control capabilities that are validated during key verification using the /v2/keys.verifyKey endpoint. Each permission typically follows a 'resource.action' naming pattern (e.g., 'documents.read', 'users.create'). A key can have both direct permissions (added via this endpoint) and indirect permissions (granted through roles). During verification, both types are checked. This endpoint is idempotent - adding the same permission multiple times has no additional effect. The operation atomically adds all valid permissions, and rollback occurs if any permission cannot be added. After permissions are added, any cached versions of the key are invalidated to ensure consistency.",
        "operationId": "addPermissions",
        "x-speakeasy-name-override": "addPermissions",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2KeysAddPermissionsRequestBody"
              },
              "examples": {
                "basic": {
                  "summary": "Add permissions using IDs",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "permissions": [
                      {
                        "id": "perm_1n9McEIBSqy44Qy7hzWyM5"
                      },
                      {
                        "id": "perm_2zF4mNyP9BsRj2aQwDxVkT"
                      }
                    ]
                  }
                },
                "withNames": {
                  "summary": "Add permissions using names",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "permissions": [
                      {
                        "name": "documents.write"
                      },
                      {
                        "name": "documents.delete"
                      }
                    ]
                  }
                },
                "withCreation": {
                  "summary": "Add and create new permissions",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "permissions": [
                      {
                        "name": "reports.export",
                        "create": true
                      },
                      {
                        "name": "reports.schedule",
                        "create": true
                      }
                    ]
                  }
                },
                "mixed": {
                  "summary": "Mix ID and name references",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "permissions": [
                      {
                        "id": "perm_1n9McEIBSqy44Qy7hzWyM5"
                      },
                      {
                        "name": "documents.publish"
                      },
                      {
                        "name": "analytics.view",
                        "create": true
                      }
                    ]
                  }
                },
                "hierarchical": {
                  "summary": "Using hierarchical permission naming",
                  "value": {
                    "keyId": "key_2cGKbMxRyIzhCxo1Idjz8q",
                    "permissions": [
                      {
                        "name": "billing.invoices.create",
                        "create": true
                      },
                      {
                        "name": "billing.invoices.view",
                        "create": true
                      },
                      {
                        "name": "billing.payments.process",
                        "create": true
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Permissions successfully added to the key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2KeysAddPermissionsResponse"
                },
                "examples": {
                  "standard": {
                    "summary": "Complete list of permissions",
                    "value": {
                      "meta": {
                        "requestId": "req_2cGKbMxRyIzhCxo1Idjz8q"
                      },
                      "data": [
                        {
                          "id": "perm_1n9McEIBSqy44Qy7hzWyM5",
                          "name": "documents.write"
                        },
                        {
                          "id": "perm_2zF4mNyP9BsRj2aQwDxVkT",
                          "name": "documents.delete"
                        },
                        {
                          "id": "perm_3qRsTu2vWxYzAbCdEfGhIj",
                          "name": "documents.read"
                        },
                        {
                          "id": "perm_4bVcWdXeYfZgHiJkLmNoPq",
                          "name": "reports.export"
                        },
                        {
                          "id": "perm_5sTu2vWxYzAbCdEfGhIjKl",
                          "name": "reports.schedule"
                        }
                      ]
                    }
                  },
                  "hierarchical": {
                    "summary": "Key with hierarchical permissions",
                    "value": {
                      "meta": {
                        "requestId": "req_7zF4mNyP9BsRj2aQwDxVkT"
                      },
                      "data": [
                        {
                          "id": "perm_1n9McEIBSqy44Qy7hzWyM5",
                          "name": "billing.invoices.create"
                        },
                        {
                          "id": "perm_2zF4mNyP9BsRj2aQwDxVkT",
                          "name": "billing.invoices.view"
                        },
                        {
                          "id": "perm_3qRsTu2vWxYzAbCdEfGhIj",
                          "name": "billing.payments.process"
                        },
                        {
                          "id": "perm_4bVcWdXeYfZgHiJkLmNoPq",
                          "name": "billing.settings.read"
                        },
                        {
                          "id": "perm_5sTu2vWxYzAbCdEfGhIjKl",
                          "name": "billing.settings.write"
                        }
                      ]
                    }
                  },
                  "empty": {
                    "summary": "Key with no permissions",
                    "value": {
                      "meta": {
                        "requestId": "req_8sTu2vWxYzAbCdEfGhIjKl"
                      },
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid keyId format, missing required fields, or malformed permission entries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "examples": {
                  "invalidKeyId": {
                    "summary": "Invalid keyId format",
                    "value": {
                      "meta": {
                        "requestId": "req_5zAbCdEfGhIjKlMnOpQrSt"
                      },
                      "error": {
                        "title": "Bad Request",
                        "detail": "keyId must start with 'key_'",
                        "status": 400,
                        "type": "bad_request"
                      }
                    }
                  },
                  "emptyPermissions": {
                    "summary": "Empty permissions array",
                    "value": {
                      "meta": {
                        "requestId": "req_6aBcDeFgHiJkLmNoPqRsT"
                      },
                      "error": {
                        "title": "Bad Request",
                        "detail": "At least one permission must be specified",
                        "status": 400,
                        "type": "bad_request"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                },
                "examples": {
                  "invalidRootKey": {
                    "summary": "Invalid root key provided",
                    "value": {
                      "meta": {
                        "requestId": "req_9tUv3wXyZaAbCdEfGhIjKl"
                      },
                      "error": {
                        "title": "Unauthorized",
                        "detail": "The root key provided is invalid or has been revoked.",
                        "status": 401,
                        "type": "unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires 'rbac.*.add_permission_to_key' and potentially 'rbac.*.create_permission')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                },
                "examples": {
                  "missingPermission": {
                    "summary": "Missing required permission",
                    "value": {
                      "meta": {
                        "requestId": "req_0uVwX4yZaAbCdEfGhIjKl"
                      },
                      "error": {
                        "title": "Forbidden",
                        "detail": "Your root key requires the 'rbac.*.add_permission_to_key' permission to perform this operation",
                        "status": 403,
                        "type": "forbidden"
                      }
                    }
                  },
                  "missingCreatePermission": {
                    "summary": "Cannot create new permissions",
                    "value": {
                      "meta": {
                        "requestId": "req_1vWxYzAbCdEfGhIjKlMnOp"
                      },
                      "error": {
                        "title": "Forbidden",
                        "detail": "Your root key requires the 'rbac.*.create_permission' permission to create new permissions",
                        "status": 403,
                        "type": "forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Key not found or specified permission IDs don't exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                },
                "examples": {
                  "keyNotFound": {
                    "summary": "Key not found",
                    "value": {
                      "meta": {
                        "requestId": "req_2wXyZaAbCdEfGhIjKlMnOp"
                      },
                      "error": {
                        "title": "Not Found",
                        "detail": "Key key_2cGKbMxRyIzhCxo1Idjz8q not found",
                        "status": 404,
                        "type": "not_found"
                      }
                    }
                  },
                  "permissionNotFound": {
                    "summary": "Permission not found",
                    "value": {
                      "meta": {
                        "requestId": "req_3xYzAbCdEfGhIjKlMnOpQr"
                      },
                      "error": {
                        "title": "Not Found",
                        "detail": "Permission perm_1n9McEIBSqy44Qy7hzWyM5 not found",
                        "status": 404,
                        "type": "not_found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                },
                "examples": {
                  "databaseError": {
                    "summary": "Database error",
                    "value": {
                      "meta": {
                        "requestId": "req_4yZaAbCdEfGhIjKlMnOpQrS"
                      },
                      "error": {
                        "title": "Internal Server Error",
                        "detail": "An unexpected error occurred while processing your request. Please try again later.",
                        "status": 500,
                        "type": "internal_server_error"
                      }
                    }
                  },
                  "cachingError": {
                    "summary": "Cache invalidation error",
                    "value": {
                      "meta": {
                        "requestId": "req_5zAbCdEfGhIjKlMnOpQrSt"
                      },
                      "error": {
                        "title": "Internal Server Error",
                        "detail": "The permissions were successfully added but there was an error invalidating cached keys. Some systems may temporarily see stale data.",
                        "status": 500,
                        "type": "internal_server_error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/keys.updateKey": {
      "post": {
        "tags": [
          "keys"
        ],
        "operationId": "updateKey",
        "x-speakeasy-name-override": "updateKey",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2KeysUpdateKeyRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2KeysUpdateKeyResponseBody"
                }
              }
            },
            "description": "Successfully updated key. Changes may take up to 30 seconds to propagate to all regions due to cache invalidation. This endpoint supports partial updates - only include fields you want to modify. To explicitly remove/disable a feature, set its field to null. Fields not included in the request will remain unchanged."
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/keys.deleteKey": {
      "post": {
        "tags": [
          "keys"
        ],
        "operationId": "deleteKey",
        "x-speakeasy-name-override": "deleteKey",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2KeysDeleteKeyRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2KeysDeleteKeyResponseBody"
                }
              }
            },
            "description": "Successfully deleted key. The key will immediately fail verification in the current region, but it may take up to 30 seconds for deletion to propagate to all regions due to eventual consistency. After deletion, the key will no longer appear in key listings, and verification attempts will return code=NOT_FOUND. Soft-deleted keys (permanent=false) remain in the database but are marked as deleted, while permanently deleted keys are completely removed."
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/keys.getKey": {
      "post": {
        "tags": [
          "keys"
        ],
        "operationId": "getKey",
        "x-speakeasy-name-override": "getKey",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2KeysGetKeyRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2KeysGetKeyResponseBody"
                }
              }
            },
            "description": "Successfully retrieved key"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/keys.createKey": {
      "post": {
        "tags": [
          "keys"
        ],
        "operationId": "createKey",
        "x-speakeasy-name-override": "createKey",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2KeysCreateKeyRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2KeysCreateKeyResponseBody"
                }
              }
            },
            "description": "Successfully created key"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/ratelimit.limit": {
      "post": {
        "tags": [
          "ratelimit"
        ],
        "operationId": "ratelimit.limit",
        "x-speakeasy-name-override": "limit",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2RatelimitLimitRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2RatelimitLimitResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/permissions.listRoles": {
      "post": {
        "tags": [
          "permissions"
        ],
        "operationId": "listRoles",
        "x-speakeasy-name-override": "ListRoles",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2PermissionsListRolesRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2PermissionsListRolesResponseBody"
                }
              }
            },
            "description": "Successfully listed roles"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v2/ratelimit.setOverride": {
      "post": {
        "tags": [
          "ratelimit"
        ],
        "operationId": "ratelimit.setOverride",
        "x-speakeasy-name-override": "setOverride",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2RatelimitSetOverrideRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2RatelimitSetOverrideResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/ratelimit.getOverride": {
      "post": {
        "tags": [
          "ratelimit"
        ],
        "operationId": "ratelimit.getOverride",
        "x-speakeasy-name-override": "getOverride",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2RatelimitGetOverrideRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2RatelimitGetOverrideResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/ratelimit.listOverrides": {
      "post": {
        "tags": [
          "ratelimit"
        ],
        "operationId": "ratelimit.listOverrides",
        "x-speakeasy-name-override": "listOverrides",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2RatelimitListOverridesRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2RatelimitListOverridesResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/ratelimit.deleteOverride": {
      "post": {
        "tags": [
          "ratelimit"
        ],
        "operationId": "ratelimit.deleteOverride",
        "x-speakeasy-name-override": "deleteOverride",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2RatelimitDeleteOverrideRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2RatelimitDeleteOverrideResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/identities.createIdentity": {
      "post": {
        "tags": [
          "identities"
        ],
        "operationId": "identities.createIdentity",
        "x-speakeasy-name-override": "createIdentity",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2IdentitiesCreateIdentityRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2IdentitiesCreateIdentityResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "This response is sent when a request conflicts with the current state of the server.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/identities.deleteIdentity": {
      "post": {
        "tags": [
          "identities"
        ],
        "operationId": "v2.identities.deleteIdentity",
        "x-speakeasy-name-override": "deleteIdentity",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2IdentitiesDeleteIdentityRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2IdentitiesDeleteIdentityResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/permissions.createPermission": {
      "post": {
        "tags": [
          "permissions"
        ],
        "operationId": "createPermission",
        "x-speakeasy-name-override": "CreatePermission",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2PermissionsCreatePermissionRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2PermissionsCreatePermissionResponseBody"
                }
              }
            },
            "description": "Successfully created permission"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - permission with that name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v2/permissions.getPermission": {
      "post": {
        "tags": [
          "permissions"
        ],
        "operationId": "getPermission",
        "x-speakeasy-name-override": "GetPermission",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2PermissionsGetPermissionRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2PermissionsGetPermissionResponseBody"
                }
              }
            },
            "description": "Successfully retrieved permission"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v2/permissions.listPermissions": {
      "post": {
        "tags": [
          "permissions"
        ],
        "operationId": "listPermissions",
        "x-speakeasy-name-override": "ListPermissions",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2PermissionsListPermissionsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2PermissionsListPermissionsResponseBody"
                }
              }
            },
            "description": "Successfully listed permissions"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v2/permissions.deleteRole": {
      "post": {
        "tags": [
          "permissions"
        ],
        "operationId": "deleteRole",
        "x-speakeasy-name-override": "DeleteRole",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2PermissionsDeleteRoleRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2PermissionsDeleteRoleResponseBody"
                }
              }
            },
            "description": "Successfully deleted role"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - role with that name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v2/apis.createApi": {
      "post": {
        "tags": [
          "apis"
        ],
        "operationId": "createApi",
        "x-speakeasy-name-override": "createApi",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2ApisCreateApiRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2ApisCreateApiResponseBody"
                }
              }
            },
            "description": "Successfully created API"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/apis.deleteApi": {
      "post": {
        "tags": [
          "apis"
        ],
        "operationId": "deleteApi",
        "x-speakeasy-name-override": "deleteApi",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2ApisDeleteApiRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2ApisDeleteApiResponseBody"
                }
              }
            },
            "description": "Successfully deleted the API"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/apis.getApi": {
      "post": {
        "tags": [
          "apis"
        ],
        "operationId": "getApi",
        "x-speakeasy-name-override": "getApi",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2ApisGetApiRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2ApisGetApiResponseBody"
                }
              }
            },
            "description": "Successfully retrieved API"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/apis.listKeys": {
      "post": {
        "tags": [
          "apis"
        ],
        "operationId": "listKeys",
        "x-speakeasy-name-override": "listKeys",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2ApisListKeysRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2ApisListKeysResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v2/liveness": {
      "get": {
        "x-speakeasy-ignore": "true",
        "tags": [
          "liveness"
        ],
        "operationId": "liveness",
        "description": "This endpoint checks if the service is alive.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2LivenessResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreconditionFailedErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Liveness check"
      }
    },
    "/v2/keys.verifyKey": {
      "post": {
        "tags": [
          "keys"
        ],
        "operationId": "verifyKey",
        "x-speakeasy-name-override": "verifyKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2KeysVerifyKeyRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2KeysVerifyKeyResponseBody"
                }
              }
            },
            "description": "Verification result"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        }
      }
    }
  }
}
